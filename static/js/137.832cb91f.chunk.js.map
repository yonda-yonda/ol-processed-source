{"version":3,"file":"static/js/137.832cb91f.chunk.js","mappings":";0GAAA,OAgCA,WAKE,IAAIA,EAAc,WAKhB,IAAIC,EAAY,CAEhBA,oBAAgC,qBAiChCA,OAAmB,SAASC,EAAOC,GAGjC,IAAIC,GAFJD,EAAUA,GAAW,CAAC,GAECE,iBAAgD,OAA5BF,EAAQE,gBAC/CC,EAAaC,EAAML,EAAOC,EAAQK,aAAe,EAAGJ,GAEpDK,EAAuC,OAAxBN,EAAQM,YAAwBN,EAAQM,YAAcR,EAAUS,mBAE/EC,EAAmBC,EAAsBN,EAAYH,EAAQU,WAAaC,aAC5EX,EAAQE,gBAAiBI,EAAaN,EAAQY,YAE5CC,EAAS,CACXC,MAAOX,EAAWW,MAClBC,OAAQZ,EAAWY,OACnBC,UAAWR,EAAiBS,aAC5BC,SAAUV,EAAiBU,SAC3BC,SAAUhB,EAAWiB,OAAOD,SAC5Bb,YAAaA,GAkBf,OAfIE,EAAiBa,aACnBR,EAAOS,SAAWd,EAAiBa,YAGjCrB,EAAQuB,mBAAqBpB,EAAWqB,OAC1CX,EAAOX,gBAAkBC,EAAWqB,KAAKC,OAAStB,EAAWqB,KAAKC,OAAS,MAGzEzB,EAAQ0B,iBACVb,EAAOc,SAAWC,EAAezB,GAC7BH,EAAQ6B,uBACVhB,EAAOc,SAASG,UAAYD,EAAqB1B,KAI9CU,CACT,GAEIJ,EAAwB,SAASsB,EAAMC,EAAiBC,EAAY3B,EAAa4B,GACnF,IAMiCC,EAG7BlB,EAAcI,EATde,EAAW,EACXC,EAAON,EAAKX,OAAOkB,WACnBC,EAAOR,EAAKX,OAAOoB,WACnBC,EAAaC,KAAKC,MAAMZ,EAAKjB,MAAQuB,GACrCO,EAAcF,KAAKC,MAAMZ,EAAKhB,OAASwB,GACvCM,EAAQ,EAAId,EAAKe,UACjB5B,EAAW6B,OAAOC,UACtBf,EAAaA,IAAgBF,EAAKP,KAAQO,EAAKP,KAAKC,OAAS,MAG7DR,EAAe,IAAIe,EAAgBD,EAAKjB,MAAQiB,EAAKhB,QACjDmB,GAAoBD,IACtBZ,EAAa,IAAI4B,WAAWlB,EAAKjB,MAAQiB,EAAKhB,SAKhD,IAHA,IAEImC,EAAIC,EAFJC,EAAkB,IAAIzC,aAAa8B,EAAaG,GAG3CS,EAAI,EAAGA,GAAKd,EAAMc,IAAK,CAC9B,IAAIC,EAAmBD,IAAMd,EAAQK,EAAeb,EAAKhB,OAASwB,EAClE,GAAwB,IAApBe,EAGJ,IAAK,IAAIC,EAAI,EAAGA,GAAKlB,EAAMkB,IAAK,CAC9B,IAAIC,EAAkBD,IAAMlB,EAAQI,EAAcV,EAAKjB,MAAQuB,EAC/D,GAAuB,IAAnBmB,EAAJ,CAIA,IAKIC,EAAWC,EAAUC,EAsBrBC,EA3BAC,EAASR,EAAItB,EAAKjB,MAAQ8B,EAAcW,EAAId,EAC5CqB,EAAY/B,EAAKjB,MAAQ0C,EAEzBO,EAAQhC,EAAKX,OAAO4C,OAAO5B,GAyB/B,GAtBI2B,EAAME,SAAW,GAEI,IAAnBF,EAAME,SAERR,EAAYM,EAAMG,SAGlBC,EAAQJ,EAAMK,YAAaL,EAAMM,aAAcN,EAAMO,eAAgBP,EAAMQ,OAAQ1B,EAAOO,EAAiBrB,EAAKX,OAAOD,UACvHsC,EAAYL,GAEdM,EAAW,GAIXC,EAF0B,IAAnBI,EAAME,SAEA,EAIAF,EAAMQ,OAIjBtC,EACF,IAAKkB,EAAK,EAAGA,EAAKG,EAAiBH,IAAM,CAMvC,IALa,EAATU,IAEFD,EAAW3B,EAAW4B,GAAU,GAChCD,IAAsB,EAATC,GAEVX,EAAK,EAAGA,EAAKM,EAAgBN,IACjB,EAATW,IAEJD,EAAW3B,EAAW4B,GAAU,IAEnB,IAAXD,GAEEvC,IACFA,EAAWwC,GAAU,GAGvB3C,EAAWA,GADXiB,EAAgB4B,EAAME,SAAW,EAAKR,EAAUC,KAAcC,GACzBxB,EAAejB,EACpDD,EAAa4C,KAAY1B,IAGrBd,IACFA,EAAWwC,GAAU,GAEvB5C,EAAa4C,KAAYvD,GAE3BsD,IAAa,EAEfC,GAAUC,CACZ,MAGA,GAAIC,EAAME,SAAW,EAGnB,IAAKd,EAAK,EAAGA,EAAKG,EAAiBH,IAAM,CACvC,IAAKD,EAAK,EAAGA,EAAKM,EAAgBN,IAEhChC,EAAWA,GADXiB,EAAesB,EAAUC,MACYvB,EAAejB,EACpDD,EAAa4C,KAAY1B,EAE3B0B,GAAUC,CACZ,MAKA,IADA5C,EAAWA,EAAWyC,EAAaA,EAAazC,EAC3CiC,EAAK,EAAGA,EAAKG,EAAiBH,IAAM,CACvC,IAAKD,EAAK,EAAGA,EAAKM,EAAgBN,IAChCjC,EAAa4C,KAAYF,EAE3BE,GAAUC,CACZ,CAGJ,GAAwB,IAAnBC,EAAME,UAAoBP,IAAaK,EAAMO,eAChD,KAAM,8BAERlC,GAzFA,CA0FF,CACF,CAEA,MAAO,CACLnB,aAAcA,EACdI,WAAYA,EACZH,SAAUA,EAEd,EAEIU,EAAiB,SAASG,GAC5B,MAAO,CACL,qBAAwBA,EAAKyC,qBAC7B,YAAezC,EAAK0C,YACpB,UAAa1C,EAAK2C,UAClB,OAAU3C,EAAKhB,OACf,MAASgB,EAAKjB,MACd,UAAaiB,EAAKe,UAClB,UAAaf,EAAK4C,UAClB,KAAQ5C,EAAKP,KAAO,CAClB,WAAcO,EAAKP,KAAKc,WACxB,WAAcP,EAAKP,KAAKgB,WACxB,SAAYT,EAAKP,KAAKoD,SACtB,SAAY7C,EAAKP,KAAKL,UACpB,KACJ,OAAU,CACR,WAAcY,EAAKX,OAAOkB,WAC1B,WAAcP,EAAKX,OAAOoB,WAC1B,SAAYT,EAAKX,OAAOwD,SACxB,SAAY7C,EAAKX,OAAOD,SACxB,YAAeY,EAAKzB,aAG1B,EAEIuB,EAAuB,SAASE,GAGlC,IAFA,IAAI8C,EAAY9C,EAAKX,OAAOkB,WAAaP,EAAKX,OAAOoB,WACjDV,EAAY,CAAC,EACRgD,EAAI,EAAGA,EAAID,EAAWC,IAAK,CAClC,IAAIf,EAAQhC,EAAKX,OAAO4C,OAAOc,GACR,IAAnBf,EAAME,SACRnC,EAAUiD,SAAU,EACQ,IAAnBhB,EAAME,SACfnC,EAAUiC,EAAMM,eAAgB,EAEhCvC,EAAU,IAAK,CAEnB,CAEA,OAAOkD,OAAOC,KAAKnD,EACrB,EAEI1B,EAAQ,SAASL,EAAOmF,EAAIjF,GAC9B,IAAI8B,EAAO,CAAC,EAGRoD,EAAa,IAAIlC,WAAWlD,EAAOmF,EAAI,IAE3C,GADAnD,EAAKyC,qBAAuBY,OAAOC,aAAaC,MAAM,KAAMH,GACnB,cAArCpD,EAAKyC,qBAAqBe,OAC5B,KAAM,sCAAwCxD,EAAKyC,qBAErDU,GAAM,GACN,IAAIM,EAAO,IAAIC,SAAS1F,EAAOmF,EAAI,IASnC,GARAnD,EAAK0C,YAAce,EAAKE,SAAS,GAAG,GACpC3D,EAAK2C,UAAYc,EAAKE,SAAS,GAAG,GAClC3D,EAAKhB,OAASyE,EAAKG,UAAU,GAAG,GAChC5D,EAAKjB,MAAQ0E,EAAKG,UAAU,IAAI,GAChC5D,EAAKe,UAAY0C,EAAKI,WAAW,IAAI,GACrCV,GAAM,IAGDjF,EAUH,GATAuF,EAAO,IAAIC,SAAS1F,EAAOmF,EAAI,IAC/BnD,EAAKP,KAAO,CAAC,EACbO,EAAKP,KAAKgB,WAAagD,EAAKG,UAAU,GAAG,GACzC5D,EAAKP,KAAKc,WAAakD,EAAKG,UAAU,GAAG,GACzC5D,EAAKP,KAAKoD,SAAWY,EAAKG,UAAU,GAAG,GACvC5D,EAAKP,KAAKL,SAAWqE,EAAKK,WAAW,IAAI,GACzCX,GAAM,GAGFnD,EAAKP,KAAKoD,SAAW,EAAG,CAC1B,IAAInD,EAAS,IAAIwB,WAAWP,KAAKoD,KAAK/D,EAAKjB,MAAQiB,EAAKhB,OAAS,IAE7DgF,GADJP,EAAO,IAAIC,SAAS1F,EAAOmF,EAAInD,EAAKP,KAAKoD,WAC1BoB,SAAS,GAAG,GACvBC,EAAK,EAAGC,EAAK,EACjB,EAAG,CACD,GAAIH,EAAM,EACR,KAAOA,KAAStE,EAAOyE,KAAQV,EAAKW,SAASF,SACxC,CACL,IAAIG,EAAMZ,EAAKW,SAASF,KAExB,IADAF,GAAOA,EACAA,KAAStE,EAAOyE,KAAQE,CACjC,CACAL,EAAMP,EAAKQ,SAASC,GAAI,GACxBA,GAAM,CACR,OAASA,EAAKlE,EAAKP,KAAKoD,UACxB,IAAc,QAATmB,GAAoBG,EAAKzE,EAAO4E,OACnC,KAAM,sCAERtE,EAAKP,KAAKC,OAASA,EACnByD,GAAMnD,EAAKP,KAAKoD,QAClB,MAC8E,KAApE7C,EAAKP,KAAKoD,SAAW7C,EAAKP,KAAKgB,WAAaT,EAAKP,KAAKL,YAC9DY,EAAKP,KAAKC,OAAS,IAAIwB,WAAWP,KAAKoD,KAAK/D,EAAKjB,MAAQiB,EAAKhB,OAAS,KAK3EyE,EAAO,IAAIC,SAAS1F,EAAOmF,EAAI,IAC/BnD,EAAKX,OAAS,CAAC,EACfW,EAAKX,OAAOoB,WAAagD,EAAKG,UAAU,GAAG,GAC3C5D,EAAKX,OAAOkB,WAAakD,EAAKG,UAAU,GAAG,GAC3C5D,EAAKX,OAAOwD,SAAWY,EAAKG,UAAU,GAAG,GACzC5D,EAAKX,OAAOD,SAAWqE,EAAKK,WAAW,IAAI,GAC3CX,GAAM,GAEN,IAAI5C,EAAaP,EAAKX,OAAOkB,WACzBE,EAAaT,EAAKX,OAAOoB,WAIzB8D,EAAmBhE,GAAeP,EAAKjB,MAAQwB,EAAc,EAAI,EAAI,GACrEiE,EAAmB/D,GAAeT,EAAKhB,OAASyB,EAAc,EAAI,EAAI,GAC1ET,EAAKX,OAAO4C,OAAS,IAAIwC,MAAMF,EAAmBC,GAElD,IADA,IAAIE,EAAS,EACJC,EAAS,EAAGA,EAASH,EAAkBG,IAC9C,IAAK,IAAIC,EAAS,EAAGA,EAASL,EAAkBK,IAAU,CAGxD,IAAIC,EAAO,EACPC,EAAY9G,EAAM+G,WAAa5B,EACnCM,EAAO,IAAIC,SAAS1F,EAAOmF,EAAIxC,KAAKqE,IAAI,GAAIF,IAC5C,IAAI9C,EAAQ,CAAC,EACbhC,EAAKX,OAAO4C,OAAOyC,KAAY1C,EAC/B,IAAIiD,EAAaxB,EAAKW,SAAS,GAE/B,GAFmCS,IACnC7C,EAAME,SAAwB,GAAb+C,EACbjD,EAAME,SAAW,EACnB,KAAM,2BAA6BF,EAAME,SAAW,IAEtD,GAAuB,IAAnBF,EAAME,SAAV,CAIA,GAAoB,IAAf+C,GAAqC,IAAfA,EAAmB,CAG5C,GAFAA,IAAe,EACfjD,EAAMkD,WAAaD,EACA,IAAfA,EACFjD,EAAMQ,OAASiB,EAAK0B,QAAQ,GAAIN,SAC3B,GAAmB,IAAfI,EACTjD,EAAMQ,OAASiB,EAAKQ,SAAS,GAAG,GAAOY,GAAQ,MAC1C,IAAmB,IAAfI,EAGT,KAAM,4BAFNjD,EAAMQ,OAASiB,EAAKK,WAAW,GAAG,GAAOe,GAAQ,CAGnD,CAEA,GAAuB,IAAnB7C,EAAME,SAKR,GAJA+C,EAAaxB,EAAKW,SAASS,GAAOA,IAClC7C,EAAMM,aAA4B,GAAb2C,EACrBA,IAAe,EACfjD,EAAMoD,mBAAqBH,EACR,IAAfA,EACFjD,EAAMO,eAAiBkB,EAAKW,SAASS,GAAOA,SACvC,GAAmB,IAAfI,EACTjD,EAAMO,eAAiBkB,EAAK4B,UAAUR,GAAM,GAAOA,GAAQ,MACtD,IAAmB,IAAfI,EAGT,KAAM,iCAFNjD,EAAMO,eAAiBkB,EAAKG,UAAUiB,GAAM,GAAOA,GAAQ,CAG7D,CAEJ,CAOA,IAAIS,EAJJ,GAFAnC,GAAM0B,EAEiB,IAAnB7C,EAAME,SAKV,GAAuB,IAAnBF,EAAME,SAAgB,CACxB,IAAIqD,GAAavF,EAAKX,OAAOwD,SAAW,GAAK,EAC7C,GAAI0C,IAAc5E,KAAKC,MAAM2E,GAC3B,KAAM,wCAERD,EAAW,IAAIE,YAAwB,EAAZD,GAClB,IAAIrE,WAAWoE,GACjBG,IAAI,IAAIvE,WAAWlD,EAAOmF,EAAgB,EAAZoC,IACrC,IAAIpD,EAAU,IAAIvD,aAAa0G,GAC/BtD,EAAMG,QAAUA,EAChBgB,GAAkB,EAAZoC,CACR,MAAO,GAAuB,IAAnBvD,EAAME,SAAgB,CAC/B,IAAIwD,EAAY/E,KAAKoD,KAAK/B,EAAMO,eAAiBP,EAAMM,aAAe,GAClEqD,EAAYhF,KAAKoD,KAAK2B,EAAY,GACtCJ,EAAW,IAAIE,YAAwB,EAAZG,GAClB,IAAIzE,WAAWoE,GACjBG,IAAI,IAAIvE,WAAWlD,EAAOmF,EAAIuC,IACrC1D,EAAMK,YAAc,IAAIuD,YAAYN,GACpCnC,GAAMuC,CACR,CAxDA,MAFEvC,GA2DJ,CAGF,OADAnD,EAAK4C,UAAYO,EACVnD,CACT,EAEIoC,EAAU,SAASyD,EAAKvD,EAAciD,EAAW/C,EAAQ1B,EAAOgF,EAAM1G,GACxE,IACW2G,EAEPC,EAAGC,EAHHC,GAAW,GAAK5D,GAAgB,EAChCS,EAAI,EACJoD,EAAW,EAEXC,EAAOzF,KAAKoD,MAAM3E,EAAWoD,GAAU1B,GAEvCuF,EAAmC,EAAbR,EAAIvB,OAAa3D,KAAKoD,KAAKzB,EAAeiD,EAAY,GAGhF,IAFAM,EAAIA,EAAIvB,OAAS,KAAO,EAAI+B,EAEvBN,EAAI,EAAGA,EAAIR,EAAWQ,IAAK,CAK9B,GAJiB,IAAbI,IACFF,EAASJ,EAAI9C,KACboD,EAAW,IAETA,GAAY7D,EACd0D,EAAKC,IAAYE,EAAW7D,EAAiB4D,EAC7CC,GAAY7D,MACP,CACL,IAAIgE,EAAehE,EAAe6D,EAClCH,GAAMC,EAASC,IAAYI,EAAeJ,EAG1CF,IAFAC,EAASJ,EAAI9C,SACboD,EAAW,GAAKG,EAElB,CAEAR,EAAKC,GAAKC,EAAII,EAAO5D,EAASwD,EAAIlF,EAAQ1B,CAC5C,CACA,OAAO0G,CACT,EAEA,OAAO/H,CACT,CAjbkB,GAobdwI,EAAe,WACjB,aAOA,IAAIC,EAGO,SAASX,EAAKC,EAAMxD,EAAciD,EAAWkB,EAAQjE,EAAQ1B,EAAO1B,GAC3E,IACW2G,EAEPC,EAAGC,EAAQK,EAAaF,EAHxBF,GAAW,GAAK5D,GAAgB,EAChCS,EAAI,EACJoD,EAAW,EAIXE,EAAmC,EAAbR,EAAIvB,OAAa3D,KAAKoD,KAAKzB,EAAeiD,EAAY,GAEhF,GADAM,EAAIA,EAAIvB,OAAS,KAAO,EAAI+B,EACxBI,EACF,IAAKV,EAAI,EAAGA,EAAIR,EAAWQ,IACR,IAAbI,IACFF,EAASJ,EAAI9C,KACboD,EAAW,IAETA,GAAY7D,GACd0D,EAAKC,IAAYE,EAAW7D,EAAiB4D,EAC7CC,GAAY7D,IAIZ0D,GAAMC,EAASC,KADfI,EAAehE,EAAe6D,GACYD,EAG1CF,IAFAC,EAASJ,EAAI9C,SACboD,EAAW,GAAKG,IAGlBR,EAAKC,GAAKU,EAAOT,QAKnB,IADAI,EAAOzF,KAAKoD,MAAM3E,EAAWoD,GAAU1B,GAClCiF,EAAI,EAAGA,EAAIR,EAAWQ,IACR,IAAbI,IACFF,EAASJ,EAAI9C,KACboD,EAAW,IAETA,GAAY7D,GACd0D,EAAKC,IAAYE,EAAW7D,EAAiB4D,EAC7CC,GAAY7D,IAIZ0D,GAAMC,EAASC,KADfI,EAAehE,EAAe6D,GACYD,EAG1CF,IAFAC,EAASJ,EAAI9C,SACboD,EAAW,GAAKG,IAIlBR,EAAKC,GAAKC,EAAII,EAAO5D,EAASwD,EAAIlF,EAAQ1B,CAGhD,EAtDEoH,EAwDU,SAASX,EAAKvD,EAAciD,EAAW/C,EAAQ1B,EAAO1B,GAChE,IAEI6G,EAFAC,GAAW,GAAK5D,GAAgB,EAChCS,EAAI,EAAGgD,EAAI,EAAGO,EAAc,EAAGH,EAAW,EAAGH,EAAI,EAEjDF,EAAO,GAGPO,EAAmC,EAAbR,EAAIvB,OAAa3D,KAAKoD,KAAKzB,EAAeiD,EAAY,GAChFM,EAAIA,EAAIvB,OAAS,KAAO,EAAI+B,EAE5B,IAAID,EAAOzF,KAAKoD,MAAM3E,EAAWoD,GAAU1B,GAC3C,IAAKiF,EAAI,EAAGA,EAAIR,EAAWQ,IACR,IAAbI,IACFF,EAASJ,EAAI9C,KACboD,EAAW,IAETA,GAAY7D,GACd0D,EAAKC,IAAYE,EAAW7D,EAAiB4D,EAC7CC,GAAY7D,IAGZ0D,GAAMC,EAASC,KADfI,EAAehE,EAAe6D,GACYD,EAG1CF,IAFAC,EAASJ,EAAI9C,SACboD,EAAW,GAAKG,IAIlBR,EAAKC,GAAKC,EAAII,EAAO5D,EAASwD,EAAIlF,EAAQ1B,EAG5C,OADA0G,EAAKY,QAAQlE,GACNsD,CACT,EAvFEU,EAyFQ,SAASX,EAAKC,EAAMxD,EAAciD,EAAWkB,EAAQjE,EAAQ1B,EAAO1B,GAC5E,IACW2G,EAEPC,EAAGC,EAAQK,EAHXJ,GAAW,GAAK5D,GAAgB,EAChCS,EAAI,EACJoD,EAAW,EAAGQ,EAAS,EAE3B,GAAIF,EACF,IAAKV,EAAI,EAAGA,EAAIR,EAAWQ,IACR,IAAbI,IACFF,EAASJ,EAAI9C,KACboD,EAAW,GACXQ,EAAS,GAEPR,GAAY7D,GACd0D,EAAMC,IAAWU,EAAUT,EAC3BC,GAAY7D,EACZqE,GAAUrE,IAGV0D,EAAKC,IAAWU,EAAUT,EAE1BC,EAAW,IAHXG,EAAehE,EAAe6D,GAI9BH,KAFAC,EAASJ,EAAI9C,OAEI,GAAKuD,GAAe,IAAQhE,EAAegE,EAC5DK,EAASL,GAEXR,EAAKC,GAAKU,EAAOT,OAGhB,CACH,IAAII,EAAOzF,KAAKoD,MAAM3E,EAAWoD,GAAU1B,GAC3C,IAAKiF,EAAI,EAAGA,EAAIR,EAAWQ,IACR,IAAbI,IACFF,EAASJ,EAAI9C,KACboD,EAAW,GACXQ,EAAS,GAEPR,GAAY7D,GAEd0D,EAAMC,IAAWU,EAAUT,EAC3BC,GAAY7D,EACZqE,GAAUrE,IAGV0D,EAAKC,IAAWU,EAAUT,EAE1BC,EAAW,IAHXG,EAAehE,EAAe6D,GAI9BH,KAFAC,EAASJ,EAAI9C,OAEI,GAAKuD,GAAe,IAAQhE,EAAegE,EAC5DK,EAASL,GAGXR,EAAKC,GAAKC,EAAII,EAAO5D,EAASwD,EAAIlF,EAAQ1B,CAE9C,CACA,OAAO0G,CACT,EA9IEU,EAgJW,SAASX,EAAKvD,EAAciD,EAAW/C,EAAQ1B,EAAO1B,GACjE,IAEI6G,EAFAC,GAAW,GAAK5D,GAAgB,EAChCS,EAAI,EAAGgD,EAAI,EAAGO,EAAc,EAAGH,EAAW,EAAGH,EAAI,EAAGW,EAAS,EAE7Db,EAAO,GACPM,EAAOzF,KAAKoD,MAAM3E,EAAWoD,GAAU1B,GAC3C,IAAKiF,EAAI,EAAGA,EAAIR,EAAWQ,IACR,IAAbI,IACFF,EAASJ,EAAI9C,KACboD,EAAW,GACXQ,EAAS,GAEPR,GAAY7D,GAEd0D,EAAMC,IAAWU,EAAUT,EAC3BC,GAAY7D,EACZqE,GAAUrE,IAGV0D,EAAKC,IAAWU,EAAUT,EAE1BC,EAAW,IAHXG,EAAehE,EAAe6D,GAI9BH,KAFAC,EAASJ,EAAI9C,OAEI,GAAKuD,GAAe,IAAQhE,EAAegE,EAC5DK,EAASL,GAGXR,EAAKC,GAAKC,EAAII,EAAO5D,EAASwD,EAAIlF,EAAQ1B,EAG5C,OADA0G,EAAKY,QAAQlE,GACNsD,CACT,EA9KEU,EAgLe,SAASX,EAAKC,EAAMxD,EAAciD,GACjD,IACWQ,EAEPC,EAAGC,EAAQK,EAHXJ,GAAW,GAAK5D,GAAgB,EAChCS,EAAI,EACJoD,EAAW,EAIXE,EAAmC,EAAbR,EAAIvB,OAAa3D,KAAKoD,KAAKzB,EAAeiD,EAAY,GAGhF,IAFAM,EAAIA,EAAIvB,OAAS,KAAO,EAAI+B,EAEvBN,EAAI,EAAGA,EAAIR,EAAWQ,IACR,IAAbI,IACFF,EAASJ,EAAI9C,KACboD,EAAW,IAETA,GAAY7D,GACd0D,EAAKC,IAAYE,EAAW7D,EAAiB4D,EAC7CC,GAAY7D,IAIZ0D,GAAMC,EAASC,KADfI,EAAehE,EAAe6D,GACYD,EAG1CF,IAFAC,EAASJ,EAAI9C,SACboD,EAAW,GAAKG,IAGlBR,EAAKC,GAAKC,EAEZ,OAAOF,CACT,EA7MEU,EA+MgB,SAASX,EAAKC,EAAMxD,EAAciD,GAClD,IACWQ,EAEPC,EAAGC,EAAQK,EAHXJ,GAAW,GAAK5D,GAAgB,EAChCS,EAAI,EACJoD,EAAW,EAAGQ,EAAS,EAG3B,IAAKZ,EAAI,EAAGA,EAAIR,EAAWQ,IACR,IAAbI,IACFF,EAASJ,EAAI9C,KACboD,EAAW,GACXQ,EAAS,GAEPR,GAAY7D,GAEd0D,EAAMC,IAAWU,EAAUT,EAC3BC,GAAY7D,EACZqE,GAAUrE,IAGV0D,EAAKC,IAAWU,EAAUT,EAE1BC,EAAW,IAHXG,EAAehE,EAAe6D,GAI9BH,KAFAC,EAASJ,EAAI9C,OAEI,GAAKuD,GAAe,IAAQhE,EAAegE,EAC5DK,EAASL,GAEXR,EAAKC,GAAKC,EAEZ,OAAOF,CACT,EAMEc,EAAe,CACjBC,qBAAsB,GACtBC,0BAA2B,SAAS9I,GAMlC,IAJA,IAAI+I,EAAO,MAAQC,EAAO,MACtBC,EAAMjJ,EAAMsG,OACZ4C,EAAQvG,KAAKC,MAAMqG,EAAM,GACzBlE,EAAI,EACDmE,GAAO,CACZ,IAAIC,EAAQD,GAAS,IAAO,IAAMA,EAClCA,GAASC,EACT,GACEJ,GAAS/I,EAAM+E,MAAQ,EACvBiE,GAAQD,GAAQ/I,EAAM+E,aACboE,GAEXJ,GAAe,MAAPA,IAAkBA,IAAS,IACnCC,GAAe,MAAPA,IAAkBA,IAAS,GACrC,CAUA,OAPU,EAANC,IACFD,GAAQD,GAAS/I,EAAM+E,IAAM,KAI/BiE,GAAe,MAAPA,IAAkBA,IAAS,MAEnB,IAHhBD,GAAe,MAAPA,IAAkBA,IAAS,QAGJ,CACjC,EAEAK,eAAgB,SAASpJ,EAAOgC,GAC9B,IAAIqH,EAAMrH,EAAKqH,IACXjE,EAAa,IAAIlC,WAAWlD,EAAOqJ,EAAK,GACxCC,EAAa,CAAC,EAElB,GADAA,EAAW7E,qBAAuBY,OAAOC,aAAaC,MAAM,KAAMH,GACF,IAA5DkE,EAAW7E,qBAAqB8E,YAAY,QAAS,GACvD,KAAM,sDAAwDD,EAAW7E,qBAE3E4E,GAAO,EACP,IAmCcG,EAnCV/D,EAAO,IAAIC,SAAS1F,EAAOqJ,EAAK,GAChC3E,EAAce,EAAKE,SAAS,GAAG,GAmCnC,GAlCA2D,EAAW5E,YAAcA,EACzB2E,GAAO,EACH3E,GAAe,IACjB4E,EAAWG,SAAWhE,EAAKG,UAAU,GAAG,GACxCyD,GAAO,GAIT5D,EAAO,IAAIC,SAAS1F,EAAOqJ,EAAK,IAChCC,EAAWtI,OAASyE,EAAKG,UAAU,GAAG,GACtC0D,EAAWvI,MAAQ0E,EAAKG,UAAU,GAAG,GACrCyD,GAAO,EACH3E,GAAe,GACjB4E,EAAWI,QAAUjE,EAAKG,UAAU,GAAG,GACvCyD,GAAO,GAGPC,EAAWI,QAAU,EAGvBjE,EAAO,IAAIC,SAAS1F,EAAOqJ,EAAK,IAChCC,EAAWK,cAAgBlE,EAAKG,UAAU,GAAG,GAC7C0D,EAAWM,eAAiBnE,EAAKE,SAAS,GAAG,GAC7C2D,EAAWO,SAAWpE,EAAKE,SAAS,GAAG,GACvC2D,EAAW3E,UAAYc,EAAKE,SAAS,IAAI,GAEzC2D,EAAWvG,UAAY0C,EAAKI,WAAW,IAAI,GAC3CyD,EAAWQ,KAAOrE,EAAKI,WAAW,IAAI,GACtCyD,EAAWS,KAAOtE,EAAKI,WAAW,IAAI,GACtCwD,GAAO,GACPrH,EAAKsH,WAAaA,EAClBtH,EAAKqH,IAAMA,EAGP3E,GAAe,IACjB8E,EAAY9E,GAAe,EAAI,GAAK,GACzBsF,KAAKlB,0BAA0B,IAAI5F,WAAWlD,EAAOqJ,EAAMG,EAAWF,EAAWO,SAAW,OACtFP,EAAWG,UAC1B,KAAM,mBAGV,OAAO,CACT,EAEAQ,kBAAmB,SAASjK,EAAOgC,GACjC,IAAIsH,EAAatH,EAAKsH,WAClBY,EAAoBF,KAAKG,iBAAiBb,EAAW3E,WACrDyF,EAAad,EAAWI,QAAUM,KAAKK,gBAAgBf,EAAW3E,WAClE2F,EAAYN,KAAKO,aAAavK,EAAOgC,EAAKqH,IAAKa,EAAmBE,GAClEI,EAAYR,KAAKO,aAAavK,EAAOgC,EAAKqH,IAAMe,EAAYF,EAAmBE,GACnFpI,EAAKqH,KAAQ,EAAIe,EACjB,IAAIrF,EAAG0F,GAAQ,EACf,IAAK1F,EAAI,EAAGA,EAAIuE,EAAWI,QAAS3E,IAClC,GAAIuF,EAAUvF,KAAOyF,EAAUzF,GAAI,CACjC0F,GAAQ,EACR,KACF,CAIF,OAFAnB,EAAWgB,UAAYA,EACvBhB,EAAWkB,UAAYA,EAChBC,CACT,EAEAF,aAAc,SAASvK,EAAOqJ,EAAKa,EAAmBrF,GACpD,IAAIV,EACJ,GAAI+F,IAAsBhH,WACxBiB,EAAU,IAAIjB,WAAWlD,EAAOqJ,EAAKxE,OAElC,CACH,IAAIyC,EAAW,IAAIE,YAAY3C,GAClB,IAAI3B,WAAWoE,GACrBG,IAAI,IAAIvE,WAAWlD,EAAOqJ,EAAKxE,IACtCV,EAAU,IAAI+F,EAAkB5C,EAClC,CACA,OAAOnD,CACT,EAEAuG,SAAU,SAAS1K,EAAOgC,GACxB,IAcIN,EAAQJ,EAdR+H,EAAMrH,EAAKqH,IACXC,EAAatH,EAAKsH,WAClB/B,EAAY+B,EAAWvI,MAAQuI,EAAWtI,OAC1C2I,EAAgBL,EAAWK,cAE3BlE,EAAO,IAAIC,SAAS1F,EAAOqJ,EAAK,GAChC5H,EAAO,CAAC,EAKZ,GAJAA,EAAKoD,SAAWY,EAAKG,UAAU,GAAG,GAClCyD,GAAO,GAGF,IAAMM,GAAiBpC,IAAcoC,IAAkB,IAAMlI,EAAKoD,SACrE,KAAO,eAGT,GAAsB,IAAlB8E,EACFjI,EAAS,IAAIwB,WAAWP,KAAKoD,KAAKwB,EAAY,IAC9C9F,EAAKC,OAASA,EACdJ,EAAa,IAAI4B,WAAWqE,GAC5BvF,EAAKX,OAAOC,WAAaA,EACzB+H,GAAO5H,EAAKoD,cAET,GAAIpD,EAAKoD,SAAW,EAAG,CAC1BnD,EAAS,IAAIwB,WAAWP,KAAKoD,KAAKwB,EAAY,IAE9C,IAAIvB,GADJP,EAAO,IAAIC,SAAS1F,EAAOqJ,EAAK5H,EAAKoD,WACtBoB,SAAS,GAAG,GACvBC,EAAK,EAAGC,EAAK,EAAGE,EAAM,EAC1B,EAAG,CACD,GAAIL,EAAM,EACR,KAAOA,KAAStE,EAAOyE,KAAQV,EAAKW,SAASF,UAI7C,IAFAG,EAAMZ,EAAKW,SAASF,KACpBF,GAAOA,EACAA,KAAStE,EAAOyE,KAAQE,EAEjCL,EAAMP,EAAKQ,SAASC,GAAI,GACxBA,GAAM,CACR,OAASA,EAAKzE,EAAKoD,UACnB,IAAc,QAATmB,GAAoBG,EAAKzE,EAAO4E,OACnC,KAAM,sCAGRhF,EAAa,IAAI4B,WAAWqE,GAC5B,IAAIoD,EAAK,EAAGC,EAAI,EAEhB,IAAKA,EAAI,EAAGA,EAAIrD,EAAWqD,IACjB,EAAJA,GACFD,EAAKjJ,EAAOkJ,GAAK,GACjBD,IAAW,EAAJC,GAGPD,EAAKjJ,EAAOkJ,GAAK,GAEV,IAALD,IACFrJ,EAAWsJ,GAAK,GAGpB5I,EAAKX,OAAOC,WAAaA,EAEzBG,EAAKC,OAASA,EACd2H,GAAO5H,EAAKoD,QACd,CAGA,OAFA7C,EAAKqH,IAAMA,EACXrH,EAAKP,KAAOA,GACL,CACT,EAEAoJ,iBAAkB,SAAS7K,EAAOgC,EAAMkI,EAAmBY,GACzD,IAOI3G,EAPAkF,EAAMrH,EAAKqH,IACXC,EAAatH,EAAKsH,WAClBI,EAAUJ,EAAWI,QACrBnC,EAAY+B,EAAWvI,MAAQuI,EAAWtI,OAC1C2D,EAAY2E,EAAW3E,UACvBE,EAAWyE,EAAWK,cAAgBf,EAAayB,gBAAgB1F,GAAa+E,EAGhFjI,EAAOO,EAAKX,OAAOC,WACvB,GAAI4I,IAAsBhH,WACxBiB,EAAU,IAAIjB,WAAWlD,EAAOqJ,EAAKxE,OAElC,CACH,IAAIyC,EAAW,IAAIE,YAAY3C,GAClB,IAAI3B,WAAWoE,GACrBG,IAAI,IAAIvE,WAAWlD,EAAOqJ,EAAKxE,IACtCV,EAAU,IAAI+F,EAAkB5C,EAClC,CACA,GAAInD,EAAQmC,SAAWiB,EAAYmC,EAE/B1H,EAAKX,OAAOH,aADV4J,EACyBlC,EAAamC,mBAAmB5G,EAASoD,EAAWmC,EAASQ,GAAmB,GAGhF/F,MAI/B,CACEnC,EAAKX,OAAOH,aAAe,IAAIgJ,EAAkB3C,EAAYmC,GAC7D,IAAIsB,EAAI,EAAGJ,EAAI,EAAG7F,EAAI,EAAGkG,EAAS,EAClC,GAAIvB,EAAU,GACZ,GAAIoB,GACF,IAAKF,EAAI,EAAGA,EAAIrD,EAAWqD,IACzB,GAAInJ,EAAKmJ,GAEP,IADAK,EAASL,EACJ7F,EAAI,EAAGA,EAAI2E,EAAS3E,IAAKkG,GAAQ1D,EACpCvF,EAAKX,OAAOH,aAAa+J,GAAU9G,EAAQ6G,UAMjD,IAAKJ,EAAI,EAAGA,EAAIrD,EAAWqD,IACzB,GAAInJ,EAAKmJ,GAEP,IADAK,EAASL,EAAIlB,EACR3E,EAAI,EAAGA,EAAI2E,EAAS3E,IACvB/C,EAAKX,OAAOH,aAAa+J,EAASlG,GAAKZ,EAAQ6G,UAOvD,IAAKJ,EAAI,EAAGA,EAAIrD,EAAWqD,IACrBnJ,EAAKmJ,KACP5I,EAAKX,OAAOH,aAAa0J,GAAKzG,EAAQ6G,KAI9C,CAGA,OAFA3B,GAAOxE,EACP7C,EAAKqH,IAAMA,GACJ,CACT,EAEA6B,gBAAiB,SAASlL,EAAOgC,GAC/B,IAAImJ,EAAWnB,KAAKnB,qBAKhBpD,EAAO,IAAIC,SAAS1F,EAAOgC,EAAKqH,IAAK,IAGzC,GAFArH,EAAKqH,KAAO,GACE5D,EAAKE,SAAS,GAAG,GACjB,EACZ,KAAM,8BAER,IAAIkB,EAAOpB,EAAKE,SAAS,GAAG,GACxByF,EAAK3F,EAAKE,SAAS,GAAG,GACtB0F,EAAK5F,EAAKE,SAAS,IAAI,GAC3B,GAAIyF,GAAMC,EACR,OAAO,EAET,IAAIhI,EAAkB,IAAIuE,YAAYyD,EAAKD,GAC3CxC,EAAa0C,WAAWtL,EAAOgC,EAAMqB,GACrC,IACI0B,EAAGwG,EAAGX,EAAG3B,EADTuC,EAAY,GAGhB,IAAKzG,EAAIqG,EAAIrG,EAAIsG,EAAItG,IAEnByG,EADAD,EAAIxG,GAAKA,EAAI8B,EAAO,EAAIA,IACT,CAAE4E,MAAOpI,EAAgB0B,EAAIqG,GAAKM,OAAQ,MAG3D,IAAIhE,EAAY1H,EAAM+G,WAAa/E,EAAKqH,IACpC1B,EAAYhF,KAAKoD,KAAK2B,EAAY,GAClCJ,EAAW,IAAIE,YAAwB,EAAZG,GAClB,IAAIzE,WAAWoE,GACrBG,IAAI,IAAIvE,WAAWlD,EAAOgC,EAAKqH,IAAK3B,IAC3C,IACgBiE,EADZtH,EAAc,IAAIuD,YAAYN,GAC9BqB,EAAS,EAASiD,EAAS,EAE/B,IADAD,EAAOtH,EAAY,GACdU,EAAIqG,EAAIrG,EAAIsG,EAAItG,KAEnBkE,EAAMuC,EADND,EAAIxG,GAAKA,EAAI8B,EAAO,EAAIA,IACL4E,OACT,IACRD,EAAUD,GAAGG,OAAUC,GAAQhD,IAAa,GAAKM,EAE7C,GAAKN,GAAUM,EAEF,MADfN,GAAUM,KAERN,EAAS,EAETgD,EAAOtH,IADPuH,KAKFjD,GAAUM,EAAM,GAEhB0C,EAAOtH,IADPuH,GAEAJ,EAAUD,GAAGG,QAAUC,IAAU,GAAKhD,IAU5C,IAAIkD,EAAa,EAAGC,EAAiB,EACjCC,EAAO,IAAIC,EACf,IAAKjH,EAAI,EAAGA,EAAIyG,EAAUlF,OAAQvB,SACXkH,IAAjBT,EAAUzG,KACZ8G,EAAalJ,KAAKuJ,IAAIL,EAAYL,EAAUzG,GAAG0G,QAIjDK,EADED,GAAcV,EACCA,EAGAU,EAMnB,IAAoBM,EAAOC,EAAMC,EAAYC,EAAgBC,EAAzDC,EAAY,GAChB,IAAKzH,EAAIqG,EAAIrG,EAAIsG,EAAItG,IAGnB,IADAkE,EAAMuC,EADND,EAAIxG,GAAKA,EAAI8B,EAAO,EAAIA,IACL4E,OACT,EAER,GADAU,EAAQ,CAAClD,EAAKsC,GACVtC,GAAO6C,EAGT,IAFAM,EAAOZ,EAAUD,GAAGG,QAAWI,EAAiB7C,EAChDoD,EAAa,GAAMP,EAAiB7C,EAC/B2B,EAAI,EAAGA,EAAIyB,EAAYzB,IAC1B4B,EAAUJ,EAAOxB,GAAKuB,OAOxB,IAFAC,EAAOZ,EAAUD,GAAGG,OACpBa,EAAOR,EACFO,EAAKrD,EAAM,EAAGqD,GAAM,EAAGA,IACbF,IAASE,EAAK,GAEpBC,EAAKE,QACRF,EAAKE,MAAQ,IAAIT,GAEnBO,EAAOA,EAAKE,QAGPF,EAAKG,OACRH,EAAKG,KAAO,IAAIV,GAElBO,EAAOA,EAAKG,MAEH,IAAPJ,GAAaC,EAAKlG,MACpBkG,EAAKlG,IAAM8F,EAAM,IAM3B,MAAO,CACLK,UAAWA,EACXV,eAAgBA,EAChBD,WAAYA,EACZE,KAAMA,EACN1H,YAAaA,EACbuH,OAAQA,EACRjD,OAAQA,EAEZ,EAEAgE,YAAa,SAAS3M,EAAOgC,EAAMkI,EAAmBY,GACpD,IAsBIyB,EAAMlG,EAAKuG,EAAsCC,EAAQC,EACzD/H,EAAGwG,EAAGX,EAAGmC,EAtBTrD,EADa1H,EAAKsH,WACGI,QACrB1I,EAASgB,EAAKsH,WAAWtI,OACzBD,EAAQiB,EAAKsH,WAAWvI,MACxBwG,EAAYxG,EAAQC,EAKpBgM,EAAchD,KAAKkB,gBAAgBlL,EAAOgC,GAC1CwK,EAAYQ,EAAYR,UACxBT,EAAOiB,EAAYjB,KAEnB1H,EAAc2I,EAAY3I,YAC1BuH,EAASoB,EAAYpB,OACrBjD,EAASqE,EAAYrE,OACrBmD,EAAiBkB,EAAYlB,eAC7BD,EAAamB,EAAYnB,WACzBrH,EAAuC,IAA9BxC,EAAKsH,WAAW3E,UAAkB,IAAM,EAI/BlD,EAAOO,EAAKX,OAAOC,WAErC2L,EAAU,EACVtE,EAAS,IACXiD,IACAjD,EAAS,GAEX,IAIIuE,EAJAvB,EAAOtH,EAAYuH,GACnBuB,EAAkC,IAApBnL,EAAKoL,WACnBC,EAAqB,IAAInD,EAAkB3C,EAAYmC,GACvDxI,EAAemM,EAGnB,GAAI3D,EAAU,GAAKyD,GACjB,IAAKD,EAAO,EAAGA,EAAOxD,EAASwD,IAM7B,GALIxD,EAAU,IAEZxI,EAAe,IAAIgJ,EAAkBmD,EAAmBpF,OAAQV,EAAY2F,EAAM3F,GAClF0F,EAAU,GAERjL,EAAKsH,WAAWK,gBAAkB5I,EAAQC,EAC5C,IAAK4J,EAAI,EAAG7F,EAAI,EAAGA,EAAI/D,EAAQ+D,IAC7B,IAAKwG,EAAI,EAAGA,EAAIxK,EAAOwK,IAAKX,IAAK,CAQ/B,GAPAvE,EAAM,EAENyG,EADAD,EAAUlB,GAAQhD,IAAa,GAAKmD,EAEhC,GAAKnD,EAASmD,IAEhBgB,EADAD,GAAYxI,EAAYuH,EAAS,KAAS,GAAKjD,EAASmD,GAGtDU,EAAUM,GAEZzG,EAAMmG,EAAUM,GAAa,GAC7BnE,GAAU6D,EAAUM,GAAa,QAUjC,IANAA,EADAD,EAAUlB,GAAQhD,IAAa,GAAKkD,EAEhC,GAAKlD,EAASkD,IAEhBiB,EADAD,GAAYxI,EAAYuH,EAAS,KAAS,GAAKjD,EAASkD,GAG1DU,EAAOR,EACFgB,EAAK,EAAGA,EAAKlB,EAAYkB,IAG5B,KADAR,EADaM,IAAYhB,EAAakB,EAAK,EAAK,EAC5BR,EAAKE,MAAQF,EAAKG,MAC3BA,OAAQH,EAAKE,MAAQ,CAC9BpG,EAAMkG,EAAKlG,IACXsC,EAASA,EAASoE,EAAK,EACvB,KACF,CAIApE,GAAU,KACZA,GAAU,GAEVgD,EAAOtH,IADPuH,IAIFgB,EAAQvG,EAAM7B,EACV2I,GAEAP,GADErB,EAAI,EACG0B,EAEFlI,EAAI,EACF7D,EAAa0J,EAAI7J,GAGjBkM,EAEXL,GAAS,IACT1L,EAAa0J,GAAKgC,EAClBK,EAAUL,GAGV1L,EAAa0J,GAAKgC,CAEtB,MAIF,IAAKhC,EAAI,EAAG7F,EAAI,EAAGA,EAAI/D,EAAQ+D,IAC7B,IAAKwG,EAAI,EAAGA,EAAIxK,EAAOwK,IAAKX,IAC1B,GAAInJ,EAAKmJ,GAAI,CAQX,GAPAvE,EAAM,EAENyG,EADAD,EAAUlB,GAAQhD,IAAa,GAAKmD,EAEhC,GAAKnD,EAASmD,IAEhBgB,EADAD,GAAYxI,EAAYuH,EAAS,KAAS,GAAKjD,EAASmD,GAGtDU,EAAUM,GAEZzG,EAAMmG,EAAUM,GAAa,GAC7BnE,GAAU6D,EAAUM,GAAa,QAUjC,IANAA,EADAD,EAAUlB,GAAQhD,IAAa,GAAKkD,EAEhC,GAAKlD,EAASkD,IAEhBiB,EADAD,GAAYxI,EAAYuH,EAAS,KAAS,GAAKjD,EAASkD,GAG1DU,EAAOR,EACFgB,EAAK,EAAGA,EAAKlB,EAAYkB,IAG5B,KADAR,EADaM,IAAYhB,EAAakB,EAAK,EAAK,EAC5BR,EAAKE,MAAQF,EAAKG,MAC3BA,OAAQH,EAAKE,MAAQ,CAC9BpG,EAAMkG,EAAKlG,IACXsC,EAASA,EAASoE,EAAK,EACvB,KACF,CAIApE,GAAU,KACZA,GAAU,GAEVgD,EAAOtH,IADPuH,IAIFgB,EAAQvG,EAAM7B,EACV2I,GACE5B,EAAI,GAAK9J,EAAKmJ,EAAI,GACpBgC,GAASK,EAEFlI,EAAI,GAAKtD,EAAKmJ,EAAI7J,GACzB6L,GAAS1L,EAAa0J,EAAI7J,GAG1B6L,GAASK,EAGXL,GAAS,IACT1L,EAAa0J,GAAKgC,EAClBK,EAAUL,GAGV1L,EAAa0J,GAAKgC,CAEtB,OAOR,IAAKhC,EAAI,EAAG7F,EAAI,EAAGA,EAAI/D,EAAQ+D,IAC7B,IAAKwG,EAAI,EAAGA,EAAIxK,EAAOwK,IAErB,GADAX,EAAI7F,EAAIhE,EAAQwK,GACX9J,GAAQA,EAAKmJ,GAChB,IAAKsC,EAAO,EAAGA,EAAOxD,EAASwD,IAAQtC,GAAGrD,EAAW,CAQnD,GAPAlB,EAAM,EAENyG,EADAD,EAAUlB,GAAQhD,IAAa,GAAKmD,EAEhC,GAAKnD,EAASmD,IAEhBgB,EADAD,GAAYxI,EAAYuH,EAAS,KAAS,GAAKjD,EAASmD,GAGtDU,EAAUM,GAEZzG,EAAMmG,EAAUM,GAAa,GAC7BnE,GAAU6D,EAAUM,GAAa,QAUjC,IANAA,EADAD,EAAUlB,GAAQhD,IAAa,GAAKkD,EAEhC,GAAKlD,EAASkD,IAEhBiB,EADAD,GAAYxI,EAAYuH,EAAS,KAAS,GAAKjD,EAASkD,GAG1DU,EAAOR,EACFgB,EAAK,EAAGA,EAAKlB,EAAYkB,IAG5B,KADAR,EADaM,IAAYhB,EAAakB,EAAK,EAAK,EAC5BR,EAAKE,MAAQF,EAAKG,MAC3BA,OAAQH,EAAKE,MAAQ,CAC9BpG,EAAMkG,EAAKlG,IACXsC,EAASA,EAASoE,EAAK,EACvB,KACF,CAIApE,GAAU,KACZA,GAAU,GAEVgD,EAAOtH,IADPuH,IAIFgB,EAAQvG,EAAM7B,EACdtD,EAAa0J,GAAKgC,CACpB,CAKR5K,EAAKqH,IAAMrH,EAAKqH,IAAqB,GAAduC,EAAS,IAAUjD,EAAS,EAAI,EAAI,GAC3D3G,EAAKX,OAAOH,aAAemM,EAEvB3D,EAAU,IAAMoB,IAClB9I,EAAKX,OAAOH,aAAe0H,EAAamC,mBAAmBsC,EAAoB9F,EAAWmC,EAASQ,GAEvG,EAEAoB,WAAY,SAAStL,EAAOgC,EAAMqB,EAAiBmB,EAAQ0I,GAGvD,IAAI5D,EAAatH,EAAKsH,WAClB5E,EAAc4E,EAAW5E,YAEzBf,EAAW,EACX2J,EAAmBtN,EAAM+G,WAAa/E,EAAKqH,KAAQ,EAAK,EAAKrJ,EAAM+G,WAAa/E,EAAKqH,IACrF5D,EAAO,IAAIC,SAAS1F,EAAOgC,EAAKqH,IAAKiE,GACrCrG,EAAaxB,EAAKW,SAAS,GAC/BzC,IACA,IAAI4J,EAAStG,GAAc,EACvBe,EAAgB,IAAXuF,EAAgB,EAAI,EAAIA,EAC7BC,GAAsB,GAAbvG,GAAmB,EAC5BwG,EAAuB,GAAbxG,EACVyG,EAAc,EAClB,GAAU,IAAN1F,EACF0F,EAAcjI,EAAKW,SAASzC,GAAWA,SAClC,GAAU,IAANqE,EACT0F,EAAcjI,EAAK4B,UAAU1D,GAAU,GAAOA,GAAY,MACrD,IAAU,IAANqE,EAGT,KAAM,iCAFN0F,EAAcjI,EAAKG,UAAUjC,GAAU,GAAOA,GAAY,CAG5D,CAGA,IACIU,EAAaiD,EAAUqG,EAAQjG,EAAWC,EAC1Cc,EAAQmF,EAASC,EAA6BvJ,EAF9CxB,EAAQ,EAAIwG,EAAWvG,UAGvBgH,EAAOT,EAAWI,QAAU,EAAIJ,EAAWkB,UAAU0C,GAAQ5D,EAAWS,KAC5E,GAAIyD,EAAO,CAiBT,IAhBAxL,EAAK8L,QAAQC,MACbF,EAAWpI,EAAKW,SAASzC,GACL8J,EACpB9J,IACA+D,EAAY/E,KAAKoD,MAAM8H,EAAW,GAAKJ,EAAU,GACjD9F,EAAYhF,KAAKoD,KAAK2B,EAAY,GAClCJ,EAAW,IAAIE,YAAwB,EAAZG,GAC3BgG,EAAS,IAAIzK,WAAWoE,GAExBtF,EAAKqH,KAAO1F,EACZgK,EAAOlG,IAAI,IAAIvE,WAAWlD,EAAOgC,EAAKqH,IAAK3B,IAE3CkG,EAAU,IAAIhG,YAAYN,GAC1BtF,EAAKqH,KAAO3B,EAEZpD,EAAe,EACPuJ,EAAW,IAAOvJ,GACxBA,IAEFoD,EAAY/E,KAAKoD,KAAK2H,EAAcpJ,EAAe,GACnDqD,EAAYhF,KAAKoD,KAAK2B,EAAY,GAClCJ,EAAW,IAAIE,YAAwB,EAAZG,IAC3BgG,EAAS,IAAIzK,WAAWoE,IACjBG,IAAI,IAAIvE,WAAWlD,EAAOgC,EAAKqH,IAAK3B,IAC3CrD,EAAc,IAAIuD,YAAYN,GAC9BtF,EAAKqH,KAAO3B,EAEVe,EADE/D,GAAe,EACR8D,EAAuBoF,EAASH,EAASI,EAAW,EAAGrJ,EAAQ1B,EAAOiH,GAGtEvB,EAAsBoF,EAASH,EAASI,EAAW,EAAGrJ,EAAQ1B,EAAOiH,GAG5ErF,GAAe,EAEjB8D,EAAoBnE,EAAahB,EAAiBiB,EAAcoJ,EAAajF,GAG7ED,EAAmBnE,EAAahB,EAAiBiB,EAAcoJ,EAAajF,EAEhF,MAGEzG,EAAK8L,QAAQE,aACb1J,EAAemJ,EACfzL,EAAKqH,KAAO1F,EACRW,EAAe,IACjBoD,EAAY/E,KAAKoD,KAAK2H,EAAcpJ,EAAe,GACnDqD,EAAYhF,KAAKoD,KAAK2B,EAAY,GAClCJ,EAAW,IAAIE,YAAwB,EAAZG,IAC3BgG,EAAS,IAAIzK,WAAWoE,IACjBG,IAAI,IAAIvE,WAAWlD,EAAOgC,EAAKqH,IAAK3B,IAC3CrD,EAAc,IAAIuD,YAAYN,GAC9BtF,EAAKqH,KAAO3B,EACRhD,GAAe,EACH,MAAVF,EACFgE,EAA4BnE,EAAahB,EAAiBiB,EAAcoJ,GAGxElF,EAAoBnE,EAAahB,EAAiBiB,EAAcoJ,GAAa,EAAOlJ,EAAQ1B,EAAOiH,GAIvF,MAAVvF,EACFgE,EAA2BnE,EAAahB,EAAiBiB,EAAcoJ,GAGvElF,EAAmBnE,EAAahB,EAAiBiB,EAAcoJ,GAAa,EAAOlJ,EAAQ1B,EAAOiH,GAO9G,EAEAkE,UAAW,SAASjO,EAAOgC,EAAMkI,EAAmBY,GAClD,IAAIxB,EAAatH,EAAKsH,WAClBvI,EAAQuI,EAAWvI,MACnBC,EAASsI,EAAWtI,OACpBuG,EAAYxG,EAAQC,EACpB4I,EAAiBN,EAAWM,eAC5BjF,EAAY2E,EAAW3E,UACvBuJ,EAAetF,EAAayB,gBAAgB1F,GAC5CpC,EAAaI,KAAKoD,KAAKhF,EAAQ6I,GAC/BnH,EAAaE,KAAKoD,KAAK/E,EAAS4I,GACpC5H,EAAKX,OAAOoB,WAAaA,EACzBT,EAAKX,OAAOkB,WAAaA,EACzBP,EAAKX,OAAOgI,IAAM,EAClB,IACI5D,EAAMzB,EAAOsD,EAAkBnD,EAC/BgK,EAIAjH,EAAY1C,EACkB0I,EAK9BkB,EAGAC,EAfAC,EAAM,EAAGC,EAAM,EAAG5H,EAAS,EAAGC,EAAS,EAAGrD,EAAkB,EAAGE,EAAiB,EAAGqD,EAAY,EAAGG,EAAa,EAAGsG,EAAS,EAAiBzJ,EAAS,EAAGC,EAAY,EAAGc,EAAW,EAAG2J,EAAY,EAAGxD,EAAI,EAAGrH,EAAW,EAGtNN,EAAkB,IAAI6G,EAAkBN,EAAiBA,GACzD6E,EAAmBzN,EAAS4I,GAAmBA,EAC/C8E,EAAkB3N,EAAQ6I,GAAmBA,EAE7CF,EAAUJ,EAAWI,QACrBjI,EAAOO,EAAKX,OAAOC,WACnBJ,EAAec,EAAKX,OAAOH,aAE3ByN,EADcrF,EAAW5E,aACY,EAAI,GAAK,GAE9CqF,EAAOT,EAAWS,KAGtB,IAAKpD,EAAS,EAAGA,EAASlE,EAAYkE,IAEpC,IADApD,EAAmBoD,IAAWlE,EAAa,EAAKmH,EAAiB6E,EAC5D7H,EAAS,EAAGA,EAASrE,EAAYqE,IAOpC,IAHA9C,EAAS6C,EAAS5F,EAAQ6I,EAAiBhD,EAASgD,EACpD7F,EAAYhD,GAHZ0C,EAAkBmD,IAAWrE,EAAa,EAAKqH,EAAiB8E,GAK3DxB,EAAO,EAAGA,EAAOxD,EAASwD,IAAQ,CAkBrC,GAjBIxD,EAAU,GACZ2E,EAAsBnN,EACtB4C,EAAS6C,EAAS5F,EAAQ6I,EAAiBhD,EAASgD,EACpD1I,EAAe,IAAIgJ,EAAkBlI,EAAKX,OAAOH,aAAa+G,OAAQV,EAAY2F,EAAOgB,EAAc3G,GACvGwC,EAAOT,EAAWkB,UAAU0C,IAE5BmB,EAAsB,KAExBvH,EAAY9G,EAAM+G,WAAa/E,EAAKqH,IAEpCrF,EAAQ,CAAC,EACTL,EAAW,EACXsD,GAHAxB,EAAO,IAAIC,SAAS1F,EAAOgC,EAAKqH,IAAK1G,KAAKqE,IAAI,GAAIF,KAGhCV,SAAS,GAC3BzC,IACAyK,EAAiB9E,EAAW5E,aAAe,EAAiB,EAAbuC,EAAiB,EAChEsG,EAAUtG,GAAc,EAAK,KACjBA,GAAc,EAAK0H,MACX/H,EAASgD,GAAmB,EAAK+E,GACnD,KAAM,kBAGR,GAAIP,GAA2B,IAATlB,EACpB,KAAM,kBAIR,IADAiB,EAA6B,EAAblH,GACI,EAElB,MADAjF,EAAKqH,KAAO1F,EACN,2BAA6BwK,EAAgB,IAEhD,GAAsB,IAAlBA,EAyBJ,GAAsB,IAAlBA,EAAqB,CAC5B,GAAIC,EAEF,KAAM,kBAaR,GAXApM,EAAK8L,QAAQc,eACb5M,EAAKqH,KAAO1F,EAGZkB,GAFAA,EAAWtB,EAAkBE,EAAiByK,IAC9CM,EAAYxO,EAAM+G,WAAa/E,EAAKqH,KACFxE,EAAW2J,EAE7ClH,EAAW,IAAIE,YAAa3C,EAAWqJ,IAAkB,EAAIrJ,EAAYA,EAAWqJ,EAAerJ,EAAWqJ,GACrG,IAAIhL,WAAWoE,GACjBG,IAAI,IAAIvE,WAAWlD,EAAOgC,EAAKqH,IAAKxE,IAC3CV,EAAU,IAAI+F,EAAkB5C,GAChC0D,EAAI,EACAvJ,EACF,IAAK6M,EAAM,EAAGA,EAAM/K,EAAiB+K,IAAO,CAC1C,IAAKC,EAAM,EAAGA,EAAM9K,EAAgB8K,IAC9B9M,EAAKqC,KACP5C,EAAa4C,GAAUK,EAAQ6G,MAEjClH,IAEFA,GAAUC,CACZ,MAGA,IAAKuK,EAAM,EAAGA,EAAM/K,EAAiB+K,IAAO,CAC1C,IAAKC,EAAM,EAAGA,EAAM9K,EAAgB8K,IAClCrN,EAAa4C,KAAYK,EAAQ6G,KAEnClH,GAAUC,CACZ,CAEF/B,EAAKqH,KAAO2B,EAAIkD,CAClB,MAKE,GAHAhH,EAAa0B,EAAaiG,gBAAiBT,GAAkBzJ,EAAY,EAAK,EAAIA,EAAW4I,GAC7F/I,EAASoE,EAAakG,YAAY9K,EAAOL,EAAUuD,EAAYzB,GAC/D9B,GAAYiF,EAAayB,gBAAgBnD,GACnB,IAAlBiH,EAMF,GAJAnM,EAAKqH,KAAO1F,EACZ3B,EAAK8L,QAAQiB,iBAGTtN,EACF,IAAK6M,EAAM,EAAGA,EAAM/K,EAAiB+K,IAAO,CAC1C,IAAKC,EAAM,EAAGA,EAAM9K,EAAgB8K,IAC9B9M,EAAKqC,KACP5C,EAAa4C,GAAUsK,EAAiBzL,KAAKqE,IAAI+C,EAAMsE,EAAoBvK,GAAUU,GAAUA,GAEjGV,IAEFA,GAAUC,CACZ,MAGA,IAAKuK,EAAM,EAAGA,EAAM/K,EAAiB+K,IAAO,CAC1C,IAAKC,EAAM,EAAGA,EAAM9K,EAAgB8K,IAClCrN,EAAa4C,GAAUsK,EAAiBzL,KAAKqE,IAAI+C,EAAMsE,EAAoBvK,GAAUU,GAAUA,EAC/FV,IAEFA,GAAUC,CACZ,MASF,GALA/B,EAAKqH,KAAO1F,EAEZiF,EAAa0C,WAAWtL,EAAOgC,EAAMqB,EAAiBmB,EAAQ0I,GAC9DvJ,EAAW,EAEPyK,EACF,GAAI3M,EACF,IAAK6M,EAAM,EAAGA,EAAM/K,EAAiB+K,IAAO,CAC1C,IAAKC,EAAM,EAAGA,EAAM9K,EAAgB8K,IAC9B9M,EAAKqC,KACP5C,EAAa4C,GAAUT,EAAgBM,KAAc0K,EAAoBvK,IAE3EA,IAEFA,GAAUC,CACZ,MAGA,IAAKuK,EAAM,EAAGA,EAAM/K,EAAiB+K,IAAO,CAC1C,IAAKC,EAAM,EAAGA,EAAM9K,EAAgB8K,IAClCrN,EAAa4C,GAAUT,EAAgBM,KAAc0K,EAAoBvK,GACzEA,IAEFA,GAAUC,CACZ,MAGC,GAAItC,EACP,IAAK6M,EAAM,EAAGA,EAAM/K,EAAiB+K,IAAO,CAC1C,IAAKC,EAAM,EAAGA,EAAM9K,EAAgB8K,IAC9B9M,EAAKqC,KACP5C,EAAa4C,GAAUT,EAAgBM,MAEzCG,IAEFA,GAAUC,CACZ,MAGA,IAAKuK,EAAM,EAAGA,EAAM/K,EAAiB+K,IAAO,CAC1C,IAAKC,EAAM,EAAGA,EAAM9K,EAAgB8K,IAClCrN,EAAa4C,KAAYT,EAAgBM,KAE3CG,GAAUC,CACZ,KA1ID,CACH,GAAIqK,EACF,GAAI3M,EACF,IAAK6M,EAAM,EAAGA,EAAM/K,EAAiB+K,IACnC,IAAKC,EAAM,EAAGA,EAAM9K,EAAgB8K,IAC9B9M,EAAKqC,KACP5C,EAAa4C,GAAUuK,EAAoBvK,IAE7CA,SAKJ,IAAKwK,EAAM,EAAGA,EAAM/K,EAAiB+K,IACnC,IAAKC,EAAM,EAAGA,EAAM9K,EAAgB8K,IAClCrN,EAAa4C,GAAUuK,EAAoBvK,GAC3CA,IAKR9B,EAAK8L,QAAQkB,WACbhN,EAAKqH,KAAO1F,CAuHd,CACF,CAIA+F,EAAU,IAAMoB,IAClB9I,EAAKX,OAAOH,aAAe0H,EAAamC,mBAAmB/I,EAAKX,OAAOH,aAAcqG,EAAWmC,EAASQ,GAE7G,EAMArI,eAAgB,SAASG,GACvB,MAAO,CACL,qBAAwBA,EAAKsH,WAAW7E,qBACxC,YAAezC,EAAKsH,WAAW5E,YAC/B,UAAa1C,EAAKsH,WAAW3E,UAC7B,OAAU3C,EAAKsH,WAAWtI,OAC1B,MAASgB,EAAKsH,WAAWvI,MACzB,cAAiBiB,EAAKsH,WAAWK,cACjC,eAAkB3H,EAAKsH,WAAWM,eAClC,SAAY5H,EAAKsH,WAAWO,SAC5B,UAAa7H,EAAKsH,WAAWvG,UAC7B,UAAa6F,EAAaqG,aAAajN,EAAKsH,WAAW3E,WACvD,UAAa3C,EAAK4C,UAClB,KAAQ5C,EAAKP,KAAO,CAClB,SAAYO,EAAKP,KAAKoD,UACpB,KACJ,OAAU,CACR,WAAc7C,EAAKX,OAAOkB,WAC1B,WAAcP,EAAKX,OAAOoB,WAE1B,SAAYT,EAAKsH,WAAWS,KAC5B,SAAY/H,EAAKsH,WAAWQ,KAC5B,YAAe9H,EAAKzB,aAG1B,EAEA2O,yBAA0B,SAASlN,EAAM8I,GACvC,IAAIzE,EAAMrE,EAAKsH,WAAWS,KACtBoF,EAASnN,EAAKsH,WAAWQ,KACzBU,EAAYxI,EAAKsH,WAAWkB,UAC5Bd,EAAU1H,EAAKsH,WAAWI,QAC1BnC,EAAYvF,EAAKsH,WAAWtI,OAASgB,EAAKsH,WAAWvI,MACrDgE,EAAI,EAAG6F,EAAI,EAAGK,EAAS,EACvBxJ,EAAOO,EAAKX,OAAOC,WACnBJ,EAAec,EAAKX,OAAOH,aAC/B,GAAIO,EACF,GAAIiI,EAAU,GACZ,GAAIoB,EACF,IAAK/F,EAAI,EAAGA,EAAI2E,EAAS3E,IAGvB,IAFAkG,EAASlG,EAAIwC,EACblB,EAAMmE,EAAUzF,GACX6F,EAAI,EAAGA,EAAIrD,EAAWqD,IACrBnJ,EAAKmJ,KACP1J,EAAa+J,EAASL,GAAKvE,QAMjC,IAAKuE,EAAI,EAAGA,EAAIrD,EAAWqD,IACzB,GAAInJ,EAAKmJ,GAEP,IADAK,EAASL,EAAIlB,EACR3E,EAAI,EAAGA,EAAI2E,EAAS3E,IACvB7D,EAAa+J,EAASvB,GAAWc,EAAUzF,QAOnD,IAAK6F,EAAI,EAAGA,EAAIrD,EAAWqD,IACrBnJ,EAAKmJ,KACP1J,EAAa0J,GAAKvE,QAMxB,GAAIqD,EAAU,GAAKyF,IAAW9I,EAC5B,GAAIyE,EACF,IAAK/F,EAAI,EAAGA,EAAI2E,EAAS3E,IAGvB,IAFAkG,EAASlG,EAAIwC,EACblB,EAAMmE,EAAUzF,GACX6F,EAAI,EAAGA,EAAIrD,EAAWqD,IACzB1J,EAAa+J,EAASL,GAAKvE,OAK/B,IAAKuE,EAAI,EAAGA,EAAIrD,EAAWqD,IAEzB,IADAK,EAASL,EAAIlB,EACR3E,EAAI,EAAGA,EAAI2E,EAAS3E,IACvB7D,EAAa+J,EAASlG,GAAKyF,EAAUzF,QAM3C,IAAK6F,EAAI,EAAGA,EAAIrD,EAAYmC,EAASkB,IACnC1J,EAAa0J,GAAKvE,CAK1B,EAEA8D,iBAAkB,SAASiF,GACzB,IAAIC,EACJ,OAAQD,GACN,KAAK,EACHC,EAAKC,UACL,MACF,KAAK,EACHD,EAAKnM,WACL,MACF,KAAK,EACHmM,EAAKE,WACL,MACF,KAAK,EACHF,EAAKG,YACL,MACF,KAAK,EACHH,EAAKI,WACL,MACF,KAAK,EACHJ,EAAKzH,YACL,MACF,KAAK,EAML,QACEyH,EAAKzO,mBAJP,KAAK,EACHyO,EAAKK,aAKT,OAAOL,CACT,EAEAJ,aAAc,SAASG,GACrB,IAAIC,EACJ,OAAQD,GACN,KAAK,EACHC,EAAK,KACL,MACF,KAAK,EACHA,EAAK,KACL,MACF,KAAK,EACHA,EAAK,MACL,MACF,KAAK,EACHA,EAAK,MACL,MACF,KAAK,EACHA,EAAK,MACL,MACF,KAAK,EACHA,EAAK,MACL,MACF,KAAK,EAML,QACEA,EAAK,YAJP,KAAK,EACHA,EAAK,MAKT,OAAOA,CACT,EAEAM,kBAAmB,SAASP,EAAG/I,GAC7B,GAAW,MAAPA,EACF,OAAO,EAET,IAAIuJ,EACJ,OAAQR,GACN,KAAK,EACHQ,EAAUvJ,IAAQ,KAAOA,GAAO,IAChC,MACF,KAAK,EACHuJ,EAAUvJ,GAAO,GAAKA,GAAO,IAC7B,MACF,KAAK,EACHuJ,EAAUvJ,IAAQ,OAASA,GAAO,MAClC,MACF,KAAK,EACHuJ,EAAUvJ,GAAO,GAAKA,GAAO,MAC7B,MACF,KAAK,EACHuJ,EAAUvJ,IAAQ,YAAcA,GAAO,WACvC,MACF,KAAK,EACHuJ,EAAUvJ,GAAO,GAAKA,GAAO,WAC7B,MACF,KAAK,EACHuJ,EAAUvJ,IAAQ,sBAA0BA,GAAO,qBACnD,MACF,KAAK,EACHuJ,EAAUvJ,IAAQ,uBAA2BA,GAAO,sBACpD,MACF,QACEuJ,GAAU,EAEd,OAAOA,CACT,EAEAvF,gBAAiB,SAAS+E,GACxB,IAAIS,EAAI,EACR,OAAQT,GACN,KAAK,EACL,KAAK,EACHS,EAAI,EACJ,MACF,KAAK,EACL,KAAK,EACHA,EAAI,EACJ,MACF,KAAK,EACL,KAAK,EACL,KAAK,EACHA,EAAI,EACJ,MACF,KAAK,EACHA,EAAI,EACJ,MACF,QACEA,EAAIT,EAER,OAAOS,CACT,EAEAhB,gBAAiB,SAASiB,EAAIC,GAC5B,IAAIX,EAAIU,EACR,OAAQA,GACN,KAAK,EACL,KAAK,EACHV,EAAIU,EAAKC,EACT,MACF,KAAK,EACL,KAAK,EACHX,EAAIU,EAAK,EAAIC,EACb,MACF,KAAK,EAEDX,EADE,IAAMW,EACJD,EAEG,IAAMC,EACT,EAGA,EAEN,MACF,KAAK,EAEDX,EADE,IAAMW,EACJD,EAGAA,EAAK,EAAIC,EAAK,EAEpB,MACF,QACEX,EAAIU,EAGR,OAAOV,CACT,EAEAN,YAAa,SAAS9K,EAAOL,EAAUuD,EAAYzB,GACjD,IAAIuK,EAAO,EACX,OAAQ9I,GACN,KAAK,EACH8I,EAAOvK,EAAK0B,QAAQxD,GACpB,MACF,KAAK,EACHqM,EAAOvK,EAAKW,SAASzC,GACrB,MACF,KAAK,EACHqM,EAAOvK,EAAKQ,SAAStC,GAAU,GAC/B,MACF,KAAK,EACHqM,EAAOvK,EAAK4B,UAAU1D,GAAU,GAChC,MACF,KAAK,EACHqM,EAAOvK,EAAKE,SAAShC,GAAU,GAC/B,MACF,KAAK,EACHqM,EAAOvK,EAAKwK,UAAUtM,GAAU,GAChC,MACF,KAAK,EACHqM,EAAOvK,EAAKK,WAAWnC,GAAU,GACjC,MACF,KAAK,EACHqM,EAAOvK,EAAKI,WAAWlC,GAAU,GACjC,MACF,QACE,KAAO,kDAEX,OAAOqM,CACT,EAEAjF,mBAAoB,SAAS1J,EAAQkG,EAAWmC,EAASQ,EAAmBgG,GAC1E,IAAInL,EAAI,EAAGwG,EAAI,EAAG2B,EAAO,EAAG8C,EAAO,EAAGG,EAAO9O,EAC7C,GAAIqI,EAAU,EAEZ,GADAyG,EAAO,IAAIjG,EAAkB3C,EAAYmC,GACrCwG,EACF,IAAKnL,EAAE,EAAGA,EAAEwC,EAAWxC,IAErB,IADAiL,EAAOjL,EACFmI,EAAK,EAAGA,EAAOxD,EAASwD,IAAQ8C,GAAQzI,EAC3C4I,EAAKH,GAAQ3O,EAAOkK,UAKxB,IAAKxG,EAAE,EAAGA,EAAEwC,EAAWxC,IAErB,IADAiL,EAAOjL,EACFmI,EAAK,EAAGA,EAAOxD,EAASwD,IAAQ8C,GAAQzI,EAC3C4I,EAAK5E,KAAOlK,EAAO2O,GAK3B,OAAOG,CACT,GAMEnE,EAAW,SAAS3F,EAAKqG,EAAMD,GACjCzC,KAAK3D,IAAMA,EACX2D,KAAK0C,KAAOA,EACZ1C,KAAKyC,MAAQA,CACf,EAiMA,MA/LkB,CAoChB2D,OAAQ,SAAwBpQ,EAAkBC,GAGhD,IAAIM,GADJN,EAAUA,GAAW,CAAC,GACIM,YAGtBwE,EAAI,EAAG/C,EAAO,CAAC,EAKnB,GAJAA,EAAKqH,IAAMpJ,EAAQK,aAAe,EAClC0B,EAAKX,OAAS,CAAC,EAGVuH,EAAaQ,eAAepJ,EAAOgC,GAAxC,CAIA,IAAIsH,EAAatH,EAAKsH,WAClB5E,EAAc4E,EAAW5E,YACzBwF,EAAoBtB,EAAauB,iBAAiBb,EAAW3E,WAGjE,GAAID,EAAc,EAChB,KAAM,8BAAgCA,EAIxCkE,EAAa8B,SAAS1K,EAAOgC,GACzBsH,EAAWK,gBAAkBL,EAAWvI,MAAQuI,EAAWtI,QAAWgB,EAAKX,OAAOC,aACpFU,EAAKX,OAAOC,WAAarB,EAAQsB,UAGnC,IAAIgG,EAAY+B,EAAWvI,MAAQuI,EAAWtI,OAC9CgB,EAAKX,OAAOH,aAAe,IAAIgJ,EAAkB3C,EAAY+B,EAAWI,SAExE1H,EAAK8L,QAAU,CACbuC,SAAU,EACVzB,aAAc,EACdb,IAAK,EACLC,WAAY,EACZgB,SAAU,EACVD,eAAgB,GAElB,IAgDIuB,EAhDAxF,GAAsB7K,EAAQsQ,2BAClC,GAAiC,IAA7BjH,EAAWK,cAEb,GAAIL,EAAWS,OAAST,EAAWQ,KAEjClB,EAAasG,yBAAyBlN,EAAM8I,QAEzC,GAAIpG,GAAe,GAAKkE,EAAaqB,kBAAkBjK,EAAOgC,GACjE4G,EAAasG,yBAAyBlN,EAAM8I,OAEzC,CACH,IAAIrF,EAAO,IAAIC,SAAS1F,EAAOgC,EAAKqH,IAAK,GACrCmH,EAAoB/K,EAAKW,SAAS,GAEtC,GADApE,EAAKqH,MACDmH,EAEF5H,EAAaiC,iBAAiB7K,EAAOgC,EAAMkI,EAAmBY,QAM9D,GAAIpG,EAAc,GAAK4E,EAAW3E,WAAa,GAAKhC,KAAK8N,IAAInH,EAAWvG,UAAY,IAAO,KAAS,CAElG,IAAI2N,EAAcjL,EAAKW,SAAS,GAGhC,GAFApE,EAAKqH,MACLrH,EAAKoL,WAAasD,EACdA,EAAc,GAAMhM,EAAc,GAAKgM,EAAc,EACvD,KAAM,wBAA0BA,EAE9BA,EAEF9H,EAAa+D,YAAY3M,EAAOgC,EAAMkI,EAAmBY,GAIzDlC,EAAaqF,UAAUjO,EAAOgC,EAAMkI,EAAmBY,EAE3D,MAGElC,EAAaqF,UAAUjO,EAAOgC,EAAMkI,EAAmBY,EAG7D,CAGF9I,EAAK4C,UAAY5C,EAAKqH,IAElBpJ,EAAQK,aACVgQ,EAAOtO,EAAKsH,WAAWO,SAAW5J,EAAQK,YAAc0B,EAAKqH,IACzD1G,KAAK8N,IAAIH,IAAS,IAEpBtO,EAAK4C,UAAY3E,EAAQK,YAAc0B,EAAKsH,WAAWO,YAIzDyG,EAAOtO,EAAKsH,WAAWO,SAAW7H,EAAKqH,IACnC1G,KAAK8N,IAAIH,IAAS,IAEpBtO,EAAK4C,UAAY5C,EAAKsH,WAAWO,WAIrC,IAAI/I,EAAS,CACXC,MAAOuI,EAAWvI,MAClBC,OAAQsI,EAAWtI,OACnBC,UAAWe,EAAKX,OAAOH,aACvBC,SAAUmI,EAAWQ,KACrB1I,SAAUkI,EAAWS,KACrB4G,gBAAiBrH,EAAWK,cAC5BiH,SAAUtH,EAAWI,QACrBmH,SAAU,CACRvG,UAAWhB,EAAWgB,UACtBE,UAAWlB,EAAWkB,WAExBjJ,SAAUS,EAAKX,OAAOC,YAMxB,GAAIU,EAAKX,OAAOC,YAAcsH,EAAa+G,kBAAkBrG,EAAW3E,UAAWpE,GAAc,CAC/F,IAAIkB,EAAOO,EAAKX,OAAOC,WACvB,IAAKyD,EAAI,EAAGA,EAAIwC,EAAWxC,IACpBtD,EAAKsD,KACRjE,EAAOG,UAAU8D,GAAKxE,GAG1BO,EAAOP,YAAcA,CACvB,CAKA,OAJAyB,EAAKzB,YAAcA,EACfN,EAAQ0B,iBACVb,EAAOc,SAAWgH,EAAa/G,eAAeG,IAEzClB,CA3HP,CA4HF,EAEAgQ,aAAc,SAAwB9Q,GAMpC,IALA,IAAI+Q,EAAQ,EACRhM,EAAI,EACJiL,EAAO,CACXA,IAAW,EACXA,OAAc,CAAC,GACRjL,EAAI/E,EAAM+G,WAAa,IAC5B6B,EAAaQ,eAAepJ,EAAOgQ,GACnCjL,GAAKiL,EAAK1G,WAAWO,SACrBkH,IACAf,EAAK3G,IAAMtE,EAEb,OAAOgM,CACT,EAIJ,CAhrDmB,GAkrDfC,EAA0B,WAC5B,IAAIC,EAAI,IAAIzJ,YAAY,GACpB0J,EAAI,IAAIhO,WAAW+N,GAGvB,OAFQ,IAAIrJ,YAAYqJ,GACtB,GAAK,EACS,IAATC,EAAE,EACX,CAN8B,GAQ1BC,EAAO,CAoBTf,OAAQ,SAASgB,EAAanR,GAC5B,IAAK+Q,EACH,KAAM,sCAGR,IAGIK,EAAMC,EAHNhR,GADJL,EAAUA,GAAW,CAAC,GACIK,aAAe,EACrC8E,EAAa,IAAIlC,WAAWkO,EAAa9Q,EAAa,IACtDmE,EAAuBY,OAAOC,aAAaC,MAAM,KAAMH,GAE3D,GAAoC,cAAhCX,EAAqBe,OACvB6L,EAAOvR,EACPwR,EAAe,MAEZ,IAA6C,UAAzC7M,EAAqB8M,UAAU,EAAG,GAKzC,KAAM,sCAAwC9M,EAJ9C4M,EAAO9I,EACP+I,EAAe,CAIjB,CAaA,IAXA,IAAmDnR,EAAiCqR,EAAUjQ,EAqD1FwD,EAAGwG,EAAGhE,EArDNkK,EAAS,EAAGC,EAAMN,EAAYrK,WAAa,GAAqB4K,EAAY,GAC5EC,EAAoB,CACtB7Q,MAAO,EACPC,OAAQ,EACRK,OAAQ,GACRV,UAAWV,EAAQU,UACnBc,KAAM,KACNoQ,WAAY,IAEVC,EAAsB,EAEnBxR,EAAcoR,GAAK,CACxB,IAAI5Q,EAASuQ,EAAKjB,OAAOgB,EAAa,CACpC9Q,YAAaA,EACbH,gBAAiBA,EACjBoB,SAAUA,EACVV,WAAuB,IAAX4Q,EACZjQ,kBAA8B,IAAXiQ,EACnB9P,gBAAgB,EAChB4O,2BAA4BtQ,EAAQsQ,2BACpC5P,UAAWV,EAAQU,WAAa,KAChCJ,YAAaN,EAAQM,aAAe,OAGtCD,EAAcQ,EAAOc,SAASgD,UAC9BrD,EAAWT,EAAOS,SACH,IAAXkQ,IACFtR,EAAkBW,EAAOX,gBACzByR,EAAkB7Q,MAAQD,EAAOC,MACjC6Q,EAAkB5Q,OAASF,EAAOE,OAClC4Q,EAAkBhB,SAAW9P,EAAO8P,UAAY,EAEhDgB,EAAkBjR,UAAYG,EAAOH,WAAaG,EAAOc,SAASjB,UAClEiR,EAAkBnQ,KAAOF,GAEvB+P,EAAe,IACb/P,GACFoQ,EAAUI,KAAKxQ,GAEbT,EAAOc,SAASH,MAAQX,EAAOc,SAASH,KAAKoD,SAAW,GAC1DiN,KAIJL,IACAG,EAAkBvQ,OAAO0Q,KAAKjR,EAAOG,WACrC2Q,EAAkBC,WAAWE,KAAK,CAChC5Q,SAAUL,EAAOK,SACjBC,SAAUN,EAAOM,SACjBb,YAAaO,EAAOP,YACpBsQ,SAAU/P,EAAO+P,UAErB,CAEA,GAAIS,EAAe,GAAKQ,EAAsB,EAAG,CAK/C,IAJAvK,EAAYqK,EAAkB7Q,MAAQ6Q,EAAkB5Q,OACxD4Q,EAAkBD,UAAYA,GAC9BpQ,EAAW,IAAI2B,WAAWqE,IACjBE,IAAIkK,EAAU,IAClB5M,EAAI,EAAGA,EAAI4M,EAAUrL,OAAQvB,IAEhC,IADAyM,EAAWG,EAAU5M,GAChBwG,EAAI,EAAGA,EAAIhE,EAAWgE,IACzBhK,EAASgK,GAAKhK,EAASgK,GAAKiG,EAASjG,GAGzCqG,EAAkBrQ,SAAWA,CAC/B,CAEA,OAAOqQ,CACT,QAMsC,KAA3B,EAAF,WAAe,OAAOT,CAAO,UAA/B,OAA+B,YAYzC,CAnvED,iGCvBA,IAAIa,EACAC,EACAC,EAEJ,MAAMC,EAAgB,CAErBC,IAAK,CAEJC,gCAAiC,SAAWC,GAE3CJ,EAAO,IAAIhP,WAAY+O,EAASM,QAAQC,OAAOvK,OAEhD,IAwGF,MAAMwK,EAAO,2lsCCvHN,MAAMC,EAAO,UD0BnBV,IAAAA,GAEC,OAAKA,IAMJA,EAJqB,qBAAVW,MAIJA,MAAO,gCAAkCF,GAC9CG,MAAQC,GAAcA,EAASC,gBAC/BF,MAAQE,GAAiBC,YAAYC,YAAaF,EAAaX,KAC/DS,KAAM5I,KAAKiJ,OAMNF,YACLC,YAAaE,OAAOC,KAAMV,EAAM,UAAYN,GAC5CS,KAAM5I,KAAKiJ,OAIPjB,EAER,CAEAiB,KAAAA,CAAQnS,GAEPmR,EAAWnR,EAAOmR,SAElBE,EAAcC,IAAIC,gCAAiC,EAEpD,CAEAjC,MAAAA,CAASgD,GAAuC,IAApBC,EAAgBC,UAAAhN,OAAA,QAAA2F,IAAAqH,UAAA,GAAAA,UAAA,GAAG,EAE9C,IAAOrB,EAAW,MAAM,IAAIsB,MAAM,+CAGlC,MAAMC,EAAiBJ,EAAMrM,WACvB0M,EAAgBxB,EAASM,QAAQmB,OAAQF,GAC/CtB,EAAKzK,IAAK2L,EAAOK,GAGjBJ,EAAmBA,GAAoBrQ,OAAQiP,EAASM,QAAQoB,0BAA2BF,EAAeD,IAC1G,MAAMI,EAAkB3B,EAASM,QAAQmB,OAAQL,GAC3CQ,EAAa5B,EAASM,QAAQuB,gBAAiBF,EAAiBP,EAAkBI,EAAeD,GAGjGO,EAAM7B,EAAK8B,MAAOJ,EAAiBA,EAAkBC,GAI3D,OAHA5B,EAASM,QAAQ0B,KAAMR,GACvBxB,EAASM,QAAQ0B,KAAML,GAEhBG,CAER,GChFc,MAAMG,UAAoBC,EAAAA,EACvCC,WAAAA,CAAYC,GACVC,QAEAtK,KAAKuK,oBAAmE,qBAAtCF,EAAcG,oBAAsCH,EAAcG,oBAAsB,EAC1HxK,KAAKyK,gBAA2D,qBAAlCJ,EAAcK,gBAAkCL,EAAcK,gBAAkB,EAE9G1K,KAAK2K,eAAiBN,EAAcO,eAAeA,EAAAA,GAAeC,eACpE,CAEAC,WAAAA,CAAY7M,GACV,OAAQ+B,KAAK2K,gBACX,KAAKI,EAAAA,GAAmBC,KACtB,MACF,KAAKD,EAAAA,GAAmBE,QACtBhN,GAASiN,EAAAA,EAAAA,IAAQ,IAAIhS,WAAW+E,IAASA,OACzC,MACF,KAAK8M,EAAAA,GAAmBI,UACtBlN,EAASyK,EAAKtC,OAAO,IAAIlN,WAAW+E,IAASA,OAC7C,MACF,QACE,MAAM,IAAIsL,MAAM,8DAAD6B,OAA+DpL,KAAK2K,iBAKvF,OAFmBxD,EAAAA,OAAYlJ,EAAQ,CAAEsI,2BAAyD,IAA7BvG,KAAKuK,sBAC9ClT,OAAO,GACnB4G,MAClB","sources":["../node_modules/lerc/LercDecode.js","../node_modules/zstddec/zstddec.ts","../node_modules/geotiff/dist-module/compression/lerc.js"],"sourcesContent":["/* jshint forin: false, bitwise: false */\n/*\nCopyright 2015-2021 Esri\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\nhttp://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n\nA copy of the license and additional notices are located with the\nsource distribution at:\n\nhttp://github.com/Esri/lerc/\n\nContributors:  Johannes Schmid, (LERC v1)\n               Chayanika Khatua, (LERC v1)\n               Wenxue Ju (LERC v1, v2.x)\n*/\n\n/* Copyright 2015-2021 Esri. Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 @preserve */\n\n/**\n * a module for decoding LERC blobs\n * @module Lerc\n */\n(function() {\n  //this decoder supports all lerc versions, each version has its own class (LercDecode and Lerc2Decode). \n  //the exported module handles format variation autoamtically.\n\n  //the original LercDecode for Version 1\n  var LercDecode = (function() {\n\n    // Note: currently, this module only has an implementation for decoding LERC data, not encoding. The name of\n    // the class was chosen to be future proof.\n\n    var CntZImage = {};\n\n    CntZImage.defaultNoDataValue = -3.4027999387901484e+38; // smallest Float32 value\n\n    /**\n     * Decode a LERC byte stream and return an object containing the pixel data and some required and optional\n     * information about it, such as the image's width and height.\n     *\n     * @param {ArrayBuffer} input The LERC input byte stream\n     * @param {object} [options] Decoding options, containing any of the following properties:\n     * @config {number} [inputOffset = 0]\n     *        Skip the first inputOffset bytes of the input byte stream. A valid LERC file is expected at that position.\n     * @config {Uint8Array} [encodedMask = null]\n     *        If specified, the decoder will not read mask information from the input and use the specified encoded\n     *        mask data instead. Mask header/data must not be present in the LERC byte stream in this case.\n     * @config {number} [noDataValue = LercCode.defaultNoDataValue]\n     *        Pixel value to use for masked pixels.\n     * @config {ArrayBufferView|Array} [pixelType = Float32Array]\n     *        The desired type of the pixelData array in the return value. Note that it is the caller's responsibility to\n     *        provide an appropriate noDataValue if the default pixelType is overridden.\n     * @config {boolean} [returnMask = false]\n     *        If true, the return value will contain a maskData property of type Uint8Array which has one element per\n     *        pixel, the value of which is 1 or 0 depending on whether that pixel's data is present or masked. If the\n     *        input LERC data does not contain a mask, maskData will not be returned.\n     * @config {boolean} [returnEncodedMask = false]\n     *        If true, the return value will contain a encodedMaskData property, which can be passed into encode() as\n     *        encodedMask.\n     * @config {boolean} [returnFileInfo = false]\n     *        If true, the return value will have a fileInfo property that contains metadata obtained from the\n     *        LERC headers and the decoding process.\n     * @config {boolean} [computeUsedBitDepths = false]\n     *        If true, the fileInfo property in the return value will contain the set of all block bit depths\n     *        encountered during decoding. Will only have an effect if returnFileInfo option is true.\n     * @returns {{width, height, pixelData, minValue, maxValue, noDataValue, maskData, encodedMaskData, fileInfo}}\n     */\n    CntZImage.decode = function(input, options) {\n      options = options || {};\n\n      var skipMask = options.encodedMaskData || (options.encodedMaskData === null);\n      var parsedData = parse(input, options.inputOffset || 0, skipMask);\n\n      var noDataValue = (options.noDataValue !== null) ? options.noDataValue : CntZImage.defaultNoDataValue;\n\n      var uncompressedData = uncompressPixelValues(parsedData, options.pixelType || Float32Array,\n        options.encodedMaskData, noDataValue, options.returnMask);\n\n      var result = {\n        width: parsedData.width,\n        height: parsedData.height,\n        pixelData: uncompressedData.resultPixels,\n        minValue: uncompressedData.minValue,\n        maxValue: parsedData.pixels.maxValue,\n        noDataValue: noDataValue\n      };\n\n      if (uncompressedData.resultMask) {\n        result.maskData = uncompressedData.resultMask;\n      }\n\n      if (options.returnEncodedMask && parsedData.mask) {\n        result.encodedMaskData = parsedData.mask.bitset ? parsedData.mask.bitset : null;\n      }\n\n      if (options.returnFileInfo) {\n        result.fileInfo = formatFileInfo(parsedData);\n        if (options.computeUsedBitDepths) {\n          result.fileInfo.bitDepths = computeUsedBitDepths(parsedData);\n        }\n      }\n\n      return result;\n    };\n\n    var uncompressPixelValues = function(data, TypedArrayClass, maskBitset, noDataValue, storeDecodedMask) {\n      var blockIdx = 0;\n      var numX = data.pixels.numBlocksX;\n      var numY = data.pixels.numBlocksY;\n      var blockWidth = Math.floor(data.width / numX);\n      var blockHeight = Math.floor(data.height / numY);\n      var scale = 2 * data.maxZError;\n      var minValue = Number.MAX_VALUE, currentValue;\n      maskBitset = maskBitset || ((data.mask) ? data.mask.bitset : null);\n\n      var resultPixels, resultMask;\n      resultPixels = new TypedArrayClass(data.width * data.height);\n      if (storeDecodedMask && maskBitset) {\n        resultMask = new Uint8Array(data.width * data.height);\n      }\n      var blockDataBuffer = new Float32Array(blockWidth * blockHeight);\n\n      var xx, yy;\n      for (var y = 0; y <= numY; y++) {\n        var thisBlockHeight = (y !== numY) ? blockHeight : (data.height % numY);\n        if (thisBlockHeight === 0) {\n          continue;\n        }\n        for (var x = 0; x <= numX; x++) {\n          var thisBlockWidth = (x !== numX) ? blockWidth : (data.width % numX);\n          if (thisBlockWidth === 0) {\n            continue;\n          }\n\n          var outPtr = y * data.width * blockHeight + x * blockWidth;\n          var outStride = data.width - thisBlockWidth;\n\n          var block = data.pixels.blocks[blockIdx];\n\n          var blockData, blockPtr, constValue;\n          if (block.encoding < 2) {\n            // block is either uncompressed or bit-stuffed (encodings 0 and 1)\n            if (block.encoding === 0) {\n              // block is uncompressed\n              blockData = block.rawData;\n            } else {\n              // block is bit-stuffed\n              unstuff(block.stuffedData, block.bitsPerPixel, block.numValidPixels, block.offset, scale, blockDataBuffer, data.pixels.maxValue);\n              blockData = blockDataBuffer;\n            }\n            blockPtr = 0;\n          }\n          else if (block.encoding === 2) {\n            // block is all 0\n            constValue = 0;\n          }\n          else {\n            // block has constant value (encoding === 3)\n            constValue = block.offset;\n          }\n\n          var maskByte;\n          if (maskBitset) {\n            for (yy = 0; yy < thisBlockHeight; yy++) {\n              if (outPtr & 7) {\n                //\n                maskByte = maskBitset[outPtr >> 3];\n                maskByte <<= outPtr & 7;\n              }\n              for (xx = 0; xx < thisBlockWidth; xx++) {\n                if (!(outPtr & 7)) {\n                  // read next byte from mask\n                  maskByte = maskBitset[outPtr >> 3];\n                }\n                if (maskByte & 128) {\n                  // pixel data present\n                  if (resultMask) {\n                    resultMask[outPtr] = 1;\n                  }\n                  currentValue = (block.encoding < 2) ? blockData[blockPtr++] : constValue;\n                  minValue = minValue > currentValue ? currentValue : minValue;\n                  resultPixels[outPtr++] = currentValue;\n                } else {\n                  // pixel data not present\n                  if (resultMask) {\n                    resultMask[outPtr] = 0;\n                  }\n                  resultPixels[outPtr++] = noDataValue;\n                }\n                maskByte <<= 1;\n              }\n              outPtr += outStride;\n            }\n          } else {\n            // mask not present, simply copy block over\n            if (block.encoding < 2) {\n              // duplicating this code block for performance reasons\n              // blockData case:\n              for (yy = 0; yy < thisBlockHeight; yy++) {\n                for (xx = 0; xx < thisBlockWidth; xx++) {\n                  currentValue = blockData[blockPtr++];\n                  minValue = minValue > currentValue ? currentValue : minValue;\n                  resultPixels[outPtr++] = currentValue;\n                }\n                outPtr += outStride;\n              }\n            }\n            else {\n              // constValue case:\n              minValue = minValue > constValue ? constValue : minValue;\n              for (yy = 0; yy < thisBlockHeight; yy++) {\n                for (xx = 0; xx < thisBlockWidth; xx++) {\n                  resultPixels[outPtr++] = constValue;\n                }\n                outPtr += outStride;\n              }\n            }\n          }\n          if ((block.encoding === 1) && (blockPtr !== block.numValidPixels)) {\n            throw \"Block and Mask do not match\";\n          }\n          blockIdx++;\n        }\n      }\n\n      return {\n        resultPixels: resultPixels,\n        resultMask: resultMask,\n        minValue: minValue\n      };\n    };\n\n    var formatFileInfo = function(data) {\n      return {\n        \"fileIdentifierString\": data.fileIdentifierString,\n        \"fileVersion\": data.fileVersion,\n        \"imageType\": data.imageType,\n        \"height\": data.height,\n        \"width\": data.width,\n        \"maxZError\": data.maxZError,\n        \"eofOffset\": data.eofOffset,\n        \"mask\": data.mask ? {\n          \"numBlocksX\": data.mask.numBlocksX,\n          \"numBlocksY\": data.mask.numBlocksY,\n          \"numBytes\": data.mask.numBytes,\n          \"maxValue\": data.mask.maxValue\n        } : null,\n        \"pixels\": {\n          \"numBlocksX\": data.pixels.numBlocksX,\n          \"numBlocksY\": data.pixels.numBlocksY,\n          \"numBytes\": data.pixels.numBytes,\n          \"maxValue\": data.pixels.maxValue,\n          \"noDataValue\": data.noDataValue\n        }\n      };\n    };\n\n    var computeUsedBitDepths = function(data) {\n      var numBlocks = data.pixels.numBlocksX * data.pixels.numBlocksY;\n      var bitDepths = {};\n      for (var i = 0; i < numBlocks; i++) {\n        var block = data.pixels.blocks[i];\n        if (block.encoding === 0) {\n          bitDepths.float32 = true;\n        } else if (block.encoding === 1) {\n          bitDepths[block.bitsPerPixel] = true;\n        } else {\n          bitDepths[0] = true;\n        }\n      }\n\n      return Object.keys(bitDepths);\n    };\n\n    var parse = function(input, fp, skipMask) {\n      var data = {};\n\n      // File header\n      var fileIdView = new Uint8Array(input, fp, 10);\n      data.fileIdentifierString = String.fromCharCode.apply(null, fileIdView);\n      if (data.fileIdentifierString.trim() !== \"CntZImage\") {\n        throw \"Unexpected file identifier string: \" + data.fileIdentifierString;\n      }\n      fp += 10;\n      var view = new DataView(input, fp, 24);\n      data.fileVersion = view.getInt32(0, true);\n      data.imageType = view.getInt32(4, true);\n      data.height = view.getUint32(8, true);\n      data.width = view.getUint32(12, true);\n      data.maxZError = view.getFloat64(16, true);\n      fp += 24;\n\n      // Mask Header\n      if (!skipMask) {\n        view = new DataView(input, fp, 16);\n        data.mask = {};\n        data.mask.numBlocksY = view.getUint32(0, true);\n        data.mask.numBlocksX = view.getUint32(4, true);\n        data.mask.numBytes = view.getUint32(8, true);\n        data.mask.maxValue = view.getFloat32(12, true);\n        fp += 16;\n\n        // Mask Data\n        if (data.mask.numBytes > 0) {\n          var bitset = new Uint8Array(Math.ceil(data.width * data.height / 8));\n          view = new DataView(input, fp, data.mask.numBytes);\n          var cnt = view.getInt16(0, true);\n          var ip = 2, op = 0;\n          do {\n            if (cnt > 0) {\n              while (cnt--) { bitset[op++] = view.getUint8(ip++); }\n            } else {\n              var val = view.getUint8(ip++);\n              cnt = -cnt;\n              while (cnt--) { bitset[op++] = val; }\n            }\n            cnt = view.getInt16(ip, true);\n            ip += 2;\n          } while (ip < data.mask.numBytes);\n          if ((cnt !== -32768) || (op < bitset.length)) {\n            throw \"Unexpected end of mask RLE encoding\";\n          }\n          data.mask.bitset = bitset;\n          fp += data.mask.numBytes;\n        }\n        else if ((data.mask.numBytes | data.mask.numBlocksY | data.mask.maxValue) === 0) {  // Special case, all nodata\n          data.mask.bitset = new Uint8Array(Math.ceil(data.width * data.height / 8));\n        }\n      }\n\n      // Pixel Header\n      view = new DataView(input, fp, 16);\n      data.pixels = {};\n      data.pixels.numBlocksY = view.getUint32(0, true);\n      data.pixels.numBlocksX = view.getUint32(4, true);\n      data.pixels.numBytes = view.getUint32(8, true);\n      data.pixels.maxValue = view.getFloat32(12, true);\n      fp += 16;\n\n      var numBlocksX = data.pixels.numBlocksX;\n      var numBlocksY = data.pixels.numBlocksY;\n      // the number of blocks specified in the header does not take into account the blocks at the end of\n      // each row/column with a special width/height that make the image complete in case the width is not\n      // evenly divisible by the number of blocks.\n      var actualNumBlocksX = numBlocksX + ((data.width % numBlocksX) > 0 ? 1 : 0);\n      var actualNumBlocksY = numBlocksY + ((data.height % numBlocksY) > 0 ? 1 : 0);\n      data.pixels.blocks = new Array(actualNumBlocksX * actualNumBlocksY);\n      var blockI = 0;\n      for (var blockY = 0; blockY < actualNumBlocksY; blockY++) {\n        for (var blockX = 0; blockX < actualNumBlocksX; blockX++) {\n\n          // Block\n          var size = 0;\n          var bytesLeft = input.byteLength - fp;\n          view = new DataView(input, fp, Math.min(10, bytesLeft));\n          var block = {};\n          data.pixels.blocks[blockI++] = block;\n          var headerByte = view.getUint8(0); size++;\n          block.encoding = headerByte & 63;\n          if (block.encoding > 3) {\n            throw \"Invalid block encoding (\" + block.encoding + \")\";\n          }\n          if (block.encoding === 2) {\n            fp++;\n            continue;\n          }\n          if ((headerByte !== 0) && (headerByte !== 2)) {\n            headerByte >>= 6;\n            block.offsetType = headerByte;\n            if (headerByte === 2) {\n              block.offset = view.getInt8(1); size++;\n            } else if (headerByte === 1) {\n              block.offset = view.getInt16(1, true); size += 2;\n            } else if (headerByte === 0) {\n              block.offset = view.getFloat32(1, true); size += 4;\n            } else {\n              throw \"Invalid block offset type\";\n            }\n\n            if (block.encoding === 1) {\n              headerByte = view.getUint8(size); size++;\n              block.bitsPerPixel = headerByte & 63;\n              headerByte >>= 6;\n              block.numValidPixelsType = headerByte;\n              if (headerByte === 2) {\n                block.numValidPixels = view.getUint8(size); size++;\n              } else if (headerByte === 1) {\n                block.numValidPixels = view.getUint16(size, true); size += 2;\n              } else if (headerByte === 0) {\n                block.numValidPixels = view.getUint32(size, true); size += 4;\n              } else {\n                throw \"Invalid valid pixel count type\";\n              }\n            }\n          }\n          fp += size;\n\n          if (block.encoding === 3) {\n            continue;\n          }\n\n          var arrayBuf, store8;\n          if (block.encoding === 0) {\n            var numPixels = (data.pixels.numBytes - 1) / 4;\n            if (numPixels !== Math.floor(numPixels)) {\n              throw \"uncompressed block has invalid length\";\n            }\n            arrayBuf = new ArrayBuffer(numPixels * 4);\n            store8 = new Uint8Array(arrayBuf);\n            store8.set(new Uint8Array(input, fp, numPixels * 4));\n            var rawData = new Float32Array(arrayBuf);\n            block.rawData = rawData;\n            fp += numPixels * 4;\n          } else if (block.encoding === 1) {\n            var dataBytes = Math.ceil(block.numValidPixels * block.bitsPerPixel / 8);\n            var dataWords = Math.ceil(dataBytes / 4);\n            arrayBuf = new ArrayBuffer(dataWords * 4);\n            store8 = new Uint8Array(arrayBuf);\n            store8.set(new Uint8Array(input, fp, dataBytes));\n            block.stuffedData = new Uint32Array(arrayBuf);\n            fp += dataBytes;\n          }\n        }\n      }\n      data.eofOffset = fp;\n      return data;\n    };\n\n    var unstuff = function(src, bitsPerPixel, numPixels, offset, scale, dest, maxValue) {\n      var bitMask = (1 << bitsPerPixel) - 1;\n      var i = 0, o;\n      var bitsLeft = 0;\n      var n, buffer;\n      var nmax = Math.ceil((maxValue - offset) / scale);\n      // get rid of trailing bytes that are already part of next block\n      var numInvalidTailBytes = src.length * 4 - Math.ceil(bitsPerPixel * numPixels / 8);\n      src[src.length - 1] <<= 8 * numInvalidTailBytes;\n\n      for (o = 0; o < numPixels; o++) {\n        if (bitsLeft === 0) {\n          buffer = src[i++];\n          bitsLeft = 32;\n        }\n        if (bitsLeft >= bitsPerPixel) {\n          n = (buffer >>> (bitsLeft - bitsPerPixel)) & bitMask;\n          bitsLeft -= bitsPerPixel;\n        } else {\n          var missingBits = (bitsPerPixel - bitsLeft);\n          n = ((buffer & bitMask) << missingBits) & bitMask;\n          buffer = src[i++];\n          bitsLeft = 32 - missingBits;\n          n += (buffer >>> bitsLeft);\n        }\n        //pixel values may exceed max due to quantization\n        dest[o] = n < nmax ? offset + n * scale : maxValue;\n      }\n      return dest;\n    };\n\n    return CntZImage;\n  })();\n\n  //version 2. Supports 2.1, 2.2, 2.3\n  var Lerc2Decode = (function() {\n    \"use strict\";\n    // Note: currently, this module only has an implementation for decoding LERC data, not encoding. The name of\n    // the class was chosen to be future proof, following LercDecode.\n\n    /*****************************************\n    * private static class bitsutffer used by Lerc2Decode\n    *******************************************/\n    var BitStuffer = {\n      //methods ending with 2 are for the new byte order used by Lerc2.3 and above.\n      //originalUnstuff is used to unpack Huffman code table. code is duplicated to unstuffx for performance reasons.\n      unstuff: function(src, dest, bitsPerPixel, numPixels, lutArr, offset, scale, maxValue) {\n        var bitMask = (1 << bitsPerPixel) - 1;\n        var i = 0, o;\n        var bitsLeft = 0;\n        var n, buffer, missingBits, nmax;\n\n        // get rid of trailing bytes that are already part of next block\n        var numInvalidTailBytes = src.length * 4 - Math.ceil(bitsPerPixel * numPixels / 8);\n        src[src.length - 1] <<= 8 * numInvalidTailBytes;\n        if (lutArr) {\n          for (o = 0; o < numPixels; o++) {\n            if (bitsLeft === 0) {\n              buffer = src[i++];\n              bitsLeft = 32;\n            }\n            if (bitsLeft >= bitsPerPixel) {\n              n = (buffer >>> (bitsLeft - bitsPerPixel)) & bitMask;\n              bitsLeft -= bitsPerPixel;\n            }\n            else {\n              missingBits = (bitsPerPixel - bitsLeft);\n              n = ((buffer & bitMask) << missingBits) & bitMask;\n              buffer = src[i++];\n              bitsLeft = 32 - missingBits;\n              n += (buffer >>> bitsLeft);\n            }\n            dest[o] = lutArr[n];//offset + lutArr[n] * scale;\n          }\n        }\n        else {\n          nmax = Math.ceil((maxValue - offset) / scale);\n          for (o = 0; o < numPixels; o++) {\n            if (bitsLeft === 0) {\n              buffer = src[i++];\n              bitsLeft = 32;\n            }\n            if (bitsLeft >= bitsPerPixel) {\n              n = (buffer >>> (bitsLeft - bitsPerPixel)) & bitMask;\n              bitsLeft -= bitsPerPixel;\n            }\n            else {\n              missingBits = (bitsPerPixel - bitsLeft);\n              n = ((buffer & bitMask) << missingBits) & bitMask;\n              buffer = src[i++];\n              bitsLeft = 32 - missingBits;\n              n += (buffer >>> bitsLeft);\n            }\n            //pixel values may exceed max due to quantization\n            dest[o] = n < nmax ? offset + n * scale : maxValue;\n          }\n        }\n      },\n\n      unstuffLUT: function(src, bitsPerPixel, numPixels, offset, scale, maxValue) {\n        var bitMask = (1 << bitsPerPixel) - 1;\n        var i = 0, o = 0, missingBits = 0, bitsLeft = 0, n = 0;\n        var buffer;\n        var dest = [];\n\n        // get rid of trailing bytes that are already part of next block\n        var numInvalidTailBytes = src.length * 4 - Math.ceil(bitsPerPixel * numPixels / 8);\n        src[src.length - 1] <<= 8 * numInvalidTailBytes;\n\n        var nmax = Math.ceil((maxValue - offset) / scale);\n        for (o = 0; o < numPixels; o++) {\n          if (bitsLeft === 0) {\n            buffer = src[i++];\n            bitsLeft = 32;\n          }\n          if (bitsLeft >= bitsPerPixel) {\n            n = (buffer >>> (bitsLeft - bitsPerPixel)) & bitMask;\n            bitsLeft -= bitsPerPixel;\n          } else {\n            missingBits = (bitsPerPixel - bitsLeft);\n            n = ((buffer & bitMask) << missingBits) & bitMask;\n            buffer = src[i++];\n            bitsLeft = 32 - missingBits;\n            n += (buffer >>> bitsLeft);\n          }\n          //dest.push(n);\n          dest[o] = n < nmax ? offset + n * scale : maxValue;\n        }\n        dest.unshift(offset);//1st one\n        return dest;\n      },\n\n      unstuff2: function(src, dest, bitsPerPixel, numPixels, lutArr, offset, scale, maxValue) {\n        var bitMask = (1 << bitsPerPixel) - 1;\n        var i = 0, o;\n        var bitsLeft = 0, bitPos = 0;\n        var n, buffer, missingBits;\n        if (lutArr) {\n          for (o = 0; o < numPixels; o++) {\n            if (bitsLeft === 0) {\n              buffer = src[i++];\n              bitsLeft = 32;\n              bitPos = 0;\n            }\n            if (bitsLeft >= bitsPerPixel) {\n              n = ((buffer >>> bitPos) & bitMask);\n              bitsLeft -= bitsPerPixel;\n              bitPos += bitsPerPixel;\n            } else {\n              missingBits = (bitsPerPixel - bitsLeft);\n              n = (buffer >>> bitPos) & bitMask;\n              buffer = src[i++];\n              bitsLeft = 32 - missingBits;\n              n |= (buffer & ((1 << missingBits) - 1)) << (bitsPerPixel - missingBits);\n              bitPos = missingBits;\n            }\n            dest[o] = lutArr[n];\n          }\n        }\n        else {\n          var nmax = Math.ceil((maxValue - offset) / scale);\n          for (o = 0; o < numPixels; o++) {\n            if (bitsLeft === 0) {\n              buffer = src[i++];\n              bitsLeft = 32;\n              bitPos = 0;\n            }\n            if (bitsLeft >= bitsPerPixel) {\n              //no unsigned left shift\n              n = ((buffer >>> bitPos) & bitMask);\n              bitsLeft -= bitsPerPixel;\n              bitPos += bitsPerPixel;\n            } else {\n              missingBits = (bitsPerPixel - bitsLeft);\n              n = (buffer >>> bitPos) & bitMask;//((buffer & bitMask) << missingBits) & bitMask;\n              buffer = src[i++];\n              bitsLeft = 32 - missingBits;\n              n |= (buffer & ((1 << missingBits) - 1)) << (bitsPerPixel - missingBits);\n              bitPos = missingBits;\n            }\n            //pixel values may exceed max due to quantization\n            dest[o] = n < nmax ? offset + n * scale : maxValue;\n          }\n        }\n        return dest;\n      },\n\n      unstuffLUT2: function(src, bitsPerPixel, numPixels, offset, scale, maxValue) {\n        var bitMask = (1 << bitsPerPixel) - 1;\n        var i = 0, o = 0, missingBits = 0, bitsLeft = 0, n = 0, bitPos = 0;\n        var buffer;\n        var dest = [];\n        var nmax = Math.ceil((maxValue - offset) / scale);\n        for (o = 0; o < numPixels; o++) {\n          if (bitsLeft === 0) {\n            buffer = src[i++];\n            bitsLeft = 32;\n            bitPos = 0;\n          }\n          if (bitsLeft >= bitsPerPixel) {\n            //no unsigned left shift\n            n = ((buffer >>> bitPos) & bitMask);\n            bitsLeft -= bitsPerPixel;\n            bitPos += bitsPerPixel;\n          } else {\n            missingBits = (bitsPerPixel - bitsLeft);\n            n = (buffer >>> bitPos) & bitMask;//((buffer & bitMask) << missingBits) & bitMask;\n            buffer = src[i++];\n            bitsLeft = 32 - missingBits;\n            n |= (buffer & ((1 << missingBits) - 1)) << (bitsPerPixel - missingBits);\n            bitPos = missingBits;\n          }\n          //dest.push(n);\n          dest[o] = n < nmax ? offset + n * scale : maxValue;\n        }\n        dest.unshift(offset);\n        return dest;\n      },\n\n      originalUnstuff: function(src, dest, bitsPerPixel, numPixels) {\n        var bitMask = (1 << bitsPerPixel) - 1;\n        var i = 0, o;\n        var bitsLeft = 0;\n        var n, buffer, missingBits;\n\n        // get rid of trailing bytes that are already part of next block\n        var numInvalidTailBytes = src.length * 4 - Math.ceil(bitsPerPixel * numPixels / 8);\n        src[src.length - 1] <<= 8 * numInvalidTailBytes;\n\n        for (o = 0; o < numPixels; o++) {\n          if (bitsLeft === 0) {\n            buffer = src[i++];\n            bitsLeft = 32;\n          }\n          if (bitsLeft >= bitsPerPixel) {\n            n = (buffer >>> (bitsLeft - bitsPerPixel)) & bitMask;\n            bitsLeft -= bitsPerPixel;\n          }\n          else {\n            missingBits = (bitsPerPixel - bitsLeft);\n            n = ((buffer & bitMask) << missingBits) & bitMask;\n            buffer = src[i++];\n            bitsLeft = 32 - missingBits;\n            n += (buffer >>> bitsLeft);\n          }\n          dest[o] = n;\n        }\n        return dest;\n      },\n\n      originalUnstuff2: function(src, dest, bitsPerPixel, numPixels) {\n        var bitMask = (1 << bitsPerPixel) - 1;\n        var i = 0, o;\n        var bitsLeft = 0, bitPos = 0;\n        var n, buffer, missingBits;\n        //micro-optimizations\n        for (o = 0; o < numPixels; o++) {\n          if (bitsLeft === 0) {\n            buffer = src[i++];\n            bitsLeft = 32;\n            bitPos = 0;\n          }\n          if (bitsLeft >= bitsPerPixel) {\n            //no unsigned left shift\n            n = ((buffer >>> bitPos) & bitMask);\n            bitsLeft -= bitsPerPixel;\n            bitPos += bitsPerPixel;\n          } else {\n            missingBits = (bitsPerPixel - bitsLeft);\n            n = (buffer >>> bitPos) & bitMask;//((buffer & bitMask) << missingBits) & bitMask;\n            buffer = src[i++];\n            bitsLeft = 32 - missingBits;\n            n |= (buffer & ((1 << missingBits) - 1)) << (bitsPerPixel - missingBits);\n            bitPos = missingBits;\n          }\n          dest[o] = n;\n        }\n        return dest;\n      }\n    };\n\n    /*****************************************\n    *private static class used by Lerc2Decode\n    ******************************************/\n    var Lerc2Helpers = {\n      HUFFMAN_LUT_BITS_MAX: 12, //use 2^12 lut, treat it like constant\n      computeChecksumFletcher32: function(input) {\n\n        var sum1 = 0xffff, sum2 = 0xffff;\n        var len = input.length;\n        var words = Math.floor(len / 2);\n        var i = 0;\n        while (words) {\n          var tlen = (words >= 359) ? 359 : words;\n          words -= tlen;\n          do {\n            sum1 += (input[i++] << 8);\n            sum2 += sum1 += input[i++];\n          } while (--tlen);\n\n          sum1 = (sum1 & 0xffff) + (sum1 >>> 16);\n          sum2 = (sum2 & 0xffff) + (sum2 >>> 16);\n        }\n\n        // add the straggler byte if it exists\n        if (len & 1) {\n          sum2 += sum1 += (input[i] << 8);\n        }\n        // second reduction step to reduce sums to 16 bits\n        sum1 = (sum1 & 0xffff) + (sum1 >>> 16);\n        sum2 = (sum2 & 0xffff) + (sum2 >>> 16);\n\n        return (sum2 << 16 | sum1) >>> 0;\n      },\n\n      readHeaderInfo: function(input, data) {\n        var ptr = data.ptr;\n        var fileIdView = new Uint8Array(input, ptr, 6);\n        var headerInfo = {};\n        headerInfo.fileIdentifierString = String.fromCharCode.apply(null, fileIdView);\n        if (headerInfo.fileIdentifierString.lastIndexOf(\"Lerc2\", 0) !== 0) {\n          throw \"Unexpected file identifier string (expect Lerc2 ): \" + headerInfo.fileIdentifierString;\n        }\n        ptr += 6;\n        var view = new DataView(input, ptr, 8);\n        var fileVersion = view.getInt32(0, true);\n        headerInfo.fileVersion = fileVersion;\n        ptr += 4;\n        if (fileVersion >= 3) {\n          headerInfo.checksum = view.getUint32(4, true); //nrows\n          ptr += 4;\n        }\n\n        //keys start from here\n        view = new DataView(input, ptr, 12);\n        headerInfo.height = view.getUint32(0, true); //nrows\n        headerInfo.width = view.getUint32(4, true); //ncols\n        ptr += 8;\n        if (fileVersion >= 4) {\n          headerInfo.numDims = view.getUint32(8, true);\n          ptr += 4;\n        }\n        else {\n          headerInfo.numDims = 1;\n        }\n\n        view = new DataView(input, ptr, 40);\n        headerInfo.numValidPixel = view.getUint32(0, true);\n        headerInfo.microBlockSize = view.getInt32(4, true);\n        headerInfo.blobSize = view.getInt32(8, true);\n        headerInfo.imageType = view.getInt32(12, true);\n\n        headerInfo.maxZError = view.getFloat64(16, true);\n        headerInfo.zMin = view.getFloat64(24, true);\n        headerInfo.zMax = view.getFloat64(32, true);\n        ptr += 40;\n        data.headerInfo = headerInfo;\n        data.ptr = ptr;\n\n        var checksum, keyLength;\n        if (fileVersion >= 3) {\n          keyLength = fileVersion >= 4 ? 52 : 48;\n          checksum = this.computeChecksumFletcher32(new Uint8Array(input, ptr - keyLength, headerInfo.blobSize - 14));\n          if (checksum !== headerInfo.checksum) {\n            throw \"Checksum failed.\";\n          }\n        }\n        return true;\n      },\n\n      checkMinMaxRanges: function(input, data) {\n        var headerInfo = data.headerInfo;\n        var OutPixelTypeArray = this.getDataTypeArray(headerInfo.imageType);\n        var rangeBytes = headerInfo.numDims * this.getDataTypeSize(headerInfo.imageType);\n        var minValues = this.readSubArray(input, data.ptr, OutPixelTypeArray, rangeBytes);\n        var maxValues = this.readSubArray(input, data.ptr + rangeBytes, OutPixelTypeArray, rangeBytes);\n        data.ptr += (2 * rangeBytes);\n        var i, equal = true;\n        for (i = 0; i < headerInfo.numDims; i++) {\n          if (minValues[i] !== maxValues[i]) {\n            equal = false;\n            break;\n          }\n        }\n        headerInfo.minValues = minValues;\n        headerInfo.maxValues = maxValues;\n        return equal;\n      },\n\n      readSubArray: function(input, ptr, OutPixelTypeArray, numBytes) {\n        var rawData;\n        if (OutPixelTypeArray === Uint8Array) {\n          rawData = new Uint8Array(input, ptr, numBytes);\n        }\n        else {\n          var arrayBuf = new ArrayBuffer(numBytes);\n          var store8 = new Uint8Array(arrayBuf);\n          store8.set(new Uint8Array(input, ptr, numBytes));\n          rawData = new OutPixelTypeArray(arrayBuf);\n        }\n        return rawData;\n      },\n\n      readMask: function(input, data) {\n        var ptr = data.ptr;\n        var headerInfo = data.headerInfo;\n        var numPixels = headerInfo.width * headerInfo.height;\n        var numValidPixel = headerInfo.numValidPixel;\n\n        var view = new DataView(input, ptr, 4);\n        var mask = {};\n        mask.numBytes = view.getUint32(0, true);\n        ptr += 4;\n\n        // Mask Data\n        if ((0 === numValidPixel || numPixels === numValidPixel) && 0 !== mask.numBytes) {\n          throw (\"invalid mask\");\n        }\n        var bitset, resultMask;\n        if (numValidPixel === 0) {\n          bitset = new Uint8Array(Math.ceil(numPixels / 8));\n          mask.bitset = bitset;\n          resultMask = new Uint8Array(numPixels);\n          data.pixels.resultMask = resultMask;\n          ptr += mask.numBytes;\n        }// ????? else if (data.mask.numBytes > 0 && data.mask.numBytes< data.numValidPixel) {\n        else if (mask.numBytes > 0) {\n          bitset = new Uint8Array(Math.ceil(numPixels / 8));\n          view = new DataView(input, ptr, mask.numBytes);\n          var cnt = view.getInt16(0, true);\n          var ip = 2, op = 0, val = 0;\n          do {\n            if (cnt > 0) {\n              while (cnt--) { bitset[op++] = view.getUint8(ip++); }\n            } else {\n              val = view.getUint8(ip++);\n              cnt = -cnt;\n              while (cnt--) { bitset[op++] = val; }\n            }\n            cnt = view.getInt16(ip, true);\n            ip += 2;\n          } while (ip < mask.numBytes);\n          if ((cnt !== -32768) || (op < bitset.length)) {\n            throw \"Unexpected end of mask RLE encoding\";\n          }\n\n          resultMask = new Uint8Array(numPixels);\n          var mb = 0, k = 0;\n\n          for (k = 0; k < numPixels; k++) {\n            if (k & 7) {\n              mb = bitset[k >> 3];\n              mb <<= k & 7;\n            }\n            else {\n              mb = bitset[k >> 3];\n            }\n            if (mb & 128) {\n              resultMask[k] = 1;\n            }\n          }\n          data.pixels.resultMask = resultMask;\n\n          mask.bitset = bitset;\n          ptr += mask.numBytes;\n        }\n        data.ptr = ptr;\n        data.mask = mask;\n        return true;\n      },\n\n      readDataOneSweep: function(input, data, OutPixelTypeArray, useBSQForOutputDim) {\n        var ptr = data.ptr;\n        var headerInfo = data.headerInfo;\n        var numDims = headerInfo.numDims;\n        var numPixels = headerInfo.width * headerInfo.height;\n        var imageType = headerInfo.imageType;\n        var numBytes = headerInfo.numValidPixel * Lerc2Helpers.getDataTypeSize(imageType) * numDims;\n        //data.pixels.numBytes = numBytes;\n        var rawData;\n        var mask = data.pixels.resultMask;\n        if (OutPixelTypeArray === Uint8Array) {\n          rawData = new Uint8Array(input, ptr, numBytes);\n        }\n        else {\n          var arrayBuf = new ArrayBuffer(numBytes);\n          var store8 = new Uint8Array(arrayBuf);\n          store8.set(new Uint8Array(input, ptr, numBytes));\n          rawData = new OutPixelTypeArray(arrayBuf);\n        }\n        if (rawData.length === numPixels * numDims) {\n          if (useBSQForOutputDim) {\n            data.pixels.resultPixels = Lerc2Helpers.swapDimensionOrder(rawData, numPixels, numDims, OutPixelTypeArray, true);\n          }\n          else {\n            data.pixels.resultPixels = rawData;\n          }\n        }\n        else  //mask\n        {\n          data.pixels.resultPixels = new OutPixelTypeArray(numPixels * numDims);\n          var z = 0, k = 0, i = 0, nStart = 0;\n          if (numDims > 1) {\n            if (useBSQForOutputDim) {\n              for (k = 0; k < numPixels; k++) {\n                if (mask[k]) {\n                  nStart = k;\n                  for (i = 0; i < numDims; i++, nStart+=numPixels) {\n                    data.pixels.resultPixels[nStart] = rawData[z++];\n                  }\n                }\n              }\n            }\n            else {\n              for (k = 0; k < numPixels; k++) {\n                if (mask[k]) {\n                  nStart = k * numDims;\n                  for (i = 0; i < numDims; i++) {\n                    data.pixels.resultPixels[nStart + i] = rawData[z++];\n                  }\n                }\n              }\n            }\n          }\n          else {\n            for (k = 0; k < numPixels; k++) {\n              if (mask[k]) {\n                data.pixels.resultPixels[k] = rawData[z++];\n              }\n            }\n          }\n        }\n        ptr += numBytes;\n        data.ptr = ptr;       //return data;\n        return true;\n      },\n\n      readHuffmanTree: function(input, data) {\n        var BITS_MAX = this.HUFFMAN_LUT_BITS_MAX; //8 is slow for the large test image\n        //var size_max = 1 << BITS_MAX;\n        /* ************************\n        * reading code table\n        *************************/\n        var view = new DataView(input, data.ptr, 16);\n        data.ptr += 16;\n        var version = view.getInt32(0, true);\n        if (version < 2) {\n          throw \"unsupported Huffman version\";\n        }\n        var size = view.getInt32(4, true);\n        var i0 = view.getInt32(8, true);\n        var i1 = view.getInt32(12, true);\n        if (i0 >= i1) {\n          return false;\n        }\n        var blockDataBuffer = new Uint32Array(i1 - i0);\n        Lerc2Helpers.decodeBits(input, data, blockDataBuffer);\n        var codeTable = []; //size\n        var i, j, k, len;\n\n        for (i = i0; i < i1; i++) {\n          j = i - (i < size ? 0 : size);//wrap around\n          codeTable[j] = { first: blockDataBuffer[i - i0], second: null };\n        }\n\n        var dataBytes = input.byteLength - data.ptr;\n        var dataWords = Math.ceil(dataBytes / 4);\n        var arrayBuf = new ArrayBuffer(dataWords * 4);\n        var store8 = new Uint8Array(arrayBuf);\n        store8.set(new Uint8Array(input, data.ptr, dataBytes));\n        var stuffedData = new Uint32Array(arrayBuf); //must start from x*4\n        var bitPos = 0, word, srcPtr = 0;\n        word = stuffedData[0];\n        for (i = i0; i < i1; i++) {\n          j = i - (i < size ? 0 : size);//wrap around\n          len = codeTable[j].first;\n          if (len > 0) {\n            codeTable[j].second = (word << bitPos) >>> (32 - len);\n\n            if (32 - bitPos >= len) {\n              bitPos += len;\n              if (bitPos === 32) {\n                bitPos = 0;\n                srcPtr++;\n                word = stuffedData[srcPtr];\n              }\n            }\n            else {\n              bitPos += len - 32;\n              srcPtr++;\n              word = stuffedData[srcPtr];\n              codeTable[j].second |= word >>> (32 - bitPos);\n            }\n          }\n        }\n\n        //finished reading code table\n\n        /* ************************\n        * building lut\n        *************************/\n        var numBitsLUT = 0, numBitsLUTQick = 0;\n        var tree = new TreeNode();\n        for (i = 0; i < codeTable.length; i++) {\n          if (codeTable[i] !== undefined) {\n            numBitsLUT = Math.max(numBitsLUT, codeTable[i].first);\n          }\n        }\n        if (numBitsLUT >= BITS_MAX) {\n          numBitsLUTQick = BITS_MAX;\n        }\n        else {\n          numBitsLUTQick = numBitsLUT;\n        }\n        // for debugging purpose\n        // if (numBitsLUT >= 30) {\n        //   console.log(\"WARning, large NUM LUT BITS IS \" + numBitsLUT);\n        // }\n        var decodeLut = [], entry, code, numEntries, jj, currentBit, node;\n        for (i = i0; i < i1; i++) {\n          j = i - (i < size ? 0 : size);//wrap around\n          len = codeTable[j].first;\n          if (len > 0) {\n            entry = [len, j];\n            if (len <= numBitsLUTQick) {\n              code = codeTable[j].second << (numBitsLUTQick - len);\n              numEntries = 1 << (numBitsLUTQick - len);\n              for (k = 0; k < numEntries; k++) {\n                decodeLut[code | k] = entry;\n              }\n            }\n            else {\n              //build tree\n              code = codeTable[j].second;\n              node = tree;\n              for (jj = len - 1; jj >= 0; jj--) {\n                currentBit = code >>> jj & 1; //no left shift as length could be 30,31\n                if (currentBit) {\n                  if (!node.right) {\n                    node.right = new TreeNode();\n                  }\n                  node = node.right;\n                }\n                else {\n                  if (!node.left) {\n                    node.left = new TreeNode();\n                  }\n                  node = node.left;\n                }\n                if (jj === 0 && !node.val) {\n                  node.val = entry[1];\n                }\n              }\n            }\n          }\n        }\n        return {\n          decodeLut: decodeLut,\n          numBitsLUTQick: numBitsLUTQick,\n          numBitsLUT: numBitsLUT,\n          tree: tree,\n          stuffedData: stuffedData,\n          srcPtr: srcPtr,\n          bitPos: bitPos\n        };\n      },\n\n      readHuffman: function(input, data, OutPixelTypeArray, useBSQForOutputDim) {\n        var headerInfo = data.headerInfo;\n        var numDims = headerInfo.numDims;\n        var height = data.headerInfo.height;\n        var width = data.headerInfo.width;\n        var numPixels = width * height;\n        //var size_max = 1 << BITS_MAX;\n        /* ************************\n        * reading huffman structure info\n        *************************/\n        var huffmanInfo = this.readHuffmanTree(input, data);\n        var decodeLut = huffmanInfo.decodeLut;\n        var tree = huffmanInfo.tree;\n        //stuffedData includes huffman headers\n        var stuffedData = huffmanInfo.stuffedData;\n        var srcPtr = huffmanInfo.srcPtr;\n        var bitPos = huffmanInfo.bitPos;\n        var numBitsLUTQick = huffmanInfo.numBitsLUTQick;\n        var numBitsLUT = huffmanInfo.numBitsLUT;\n        var offset = data.headerInfo.imageType === 0 ? 128 : 0;\n        /*************************\n        *  decode\n        ***************************/\n        var node, val, delta, mask = data.pixels.resultMask, valTmp, valTmpQuick, currentBit;\n        var i, j, k, ii;\n        var prevVal = 0;\n        if (bitPos > 0) {\n          srcPtr++;\n          bitPos = 0;\n        }\n        var word = stuffedData[srcPtr];\n        var deltaEncode = data.encodeMode === 1;\n        var resultPixelsAllDim = new OutPixelTypeArray(numPixels * numDims);\n        var resultPixels = resultPixelsAllDim;\n        var iDim;\n        // TODO: reevaluate the need to keep inlined decoding code as IE support is phasing out\n        if (numDims < 2 || deltaEncode) {\n          for (iDim = 0; iDim < numDims; iDim++) {\n            if (numDims > 1) {\n              //get the mem block of current dimension\n              resultPixels = new OutPixelTypeArray(resultPixelsAllDim.buffer, numPixels * iDim, numPixels);\n              prevVal = 0;\n            }\n            if (data.headerInfo.numValidPixel === width * height) { //all valid\n              for (k = 0, i = 0; i < height; i++) {\n                for (j = 0; j < width; j++, k++) {\n                  val = 0;\n                  valTmp = (word << bitPos) >>> (32 - numBitsLUTQick);\n                  valTmpQuick = valTmp;// >>> deltaBits;\n                  if (32 - bitPos < numBitsLUTQick) {\n                    valTmp |= ((stuffedData[srcPtr + 1]) >>> (64 - bitPos - numBitsLUTQick));\n                    valTmpQuick = valTmp;// >>> deltaBits;\n                  }\n                  if (decodeLut[valTmpQuick])    // if there, move the correct number of bits and done\n                  {\n                    val = decodeLut[valTmpQuick][1];\n                    bitPos += decodeLut[valTmpQuick][0];\n                  }\n                  else {\n                    valTmp = (word << bitPos) >>> (32 - numBitsLUT);\n                    valTmpQuick = valTmp;// >>> deltaBits;\n                    if (32 - bitPos < numBitsLUT) {\n                      valTmp |= ((stuffedData[srcPtr + 1]) >>> (64 - bitPos - numBitsLUT));\n                      valTmpQuick = valTmp;// >>> deltaBits;\n                    }\n                    node = tree;\n                    for (ii = 0; ii < numBitsLUT; ii++) {\n                      currentBit = valTmp >>> (numBitsLUT - ii - 1) & 1;\n                      node = currentBit ? node.right : node.left;\n                      if (!(node.left || node.right)) {\n                        val = node.val;\n                        bitPos = bitPos + ii + 1;\n                        break;\n                      }\n                    }\n                  }\n    \n                  if (bitPos >= 32) {\n                    bitPos -= 32;\n                    srcPtr++;\n                    word = stuffedData[srcPtr];\n                  }\n    \n                  delta = val - offset;\n                  if (deltaEncode) {\n                    if (j > 0) {\n                      delta += prevVal;    // use overflow\n                    }\n                    else if (i > 0) {\n                      delta += resultPixels[k - width];\n                    }\n                    else {\n                      delta += prevVal;\n                    }\n                    delta &= 0xFF; //overflow\n                    resultPixels[k] = delta;//overflow\n                    prevVal = delta;\n                  }\n                  else {\n                    resultPixels[k] = delta;\n                  }\n                }\n              }\n            }\n            else { //not all valid, use mask\n              for (k = 0, i = 0; i < height; i++) {\n                for (j = 0; j < width; j++, k++) {\n                  if (mask[k]) {\n                    val = 0;\n                    valTmp = (word << bitPos) >>> (32 - numBitsLUTQick);\n                    valTmpQuick = valTmp;// >>> deltaBits;\n                    if (32 - bitPos < numBitsLUTQick) {\n                      valTmp |= ((stuffedData[srcPtr + 1]) >>> (64 - bitPos - numBitsLUTQick));\n                      valTmpQuick = valTmp;// >>> deltaBits;\n                    }\n                    if (decodeLut[valTmpQuick])    // if there, move the correct number of bits and done\n                    {\n                      val = decodeLut[valTmpQuick][1];\n                      bitPos += decodeLut[valTmpQuick][0];\n                    }\n                    else {\n                      valTmp = (word << bitPos) >>> (32 - numBitsLUT);\n                      valTmpQuick = valTmp;// >>> deltaBits;\n                      if (32 - bitPos < numBitsLUT) {\n                        valTmp |= ((stuffedData[srcPtr + 1]) >>> (64 - bitPos - numBitsLUT));\n                        valTmpQuick = valTmp;// >>> deltaBits;\n                      }\n                      node = tree;\n                      for (ii = 0; ii < numBitsLUT; ii++) {\n                        currentBit = valTmp >>> (numBitsLUT - ii - 1) & 1;\n                        node = currentBit ? node.right : node.left;\n                        if (!(node.left || node.right)) {\n                          val = node.val;\n                          bitPos = bitPos + ii + 1;\n                          break;\n                        }\n                      }\n                    }\n    \n                    if (bitPos >= 32) {\n                      bitPos -= 32;\n                      srcPtr++;\n                      word = stuffedData[srcPtr];\n                    }\n    \n                    delta = val - offset;\n                    if (deltaEncode) {\n                      if (j > 0 && mask[k - 1]) {\n                        delta += prevVal;    // use overflow\n                      }\n                      else if (i > 0 && mask[k - width]) {\n                        delta += resultPixels[k - width];\n                      }\n                      else {\n                        delta += prevVal;\n                      }\n    \n                      delta &= 0xFF; //overflow\n                      resultPixels[k] = delta;//overflow\n                      prevVal = delta;\n                    }\n                    else {\n                      resultPixels[k] = delta;\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n        else {\n          for (k = 0, i = 0; i < height; i++) {\n            for (j = 0; j < width; j++) {\n              k = i * width + j;\n              if (!mask || mask[k]) {\n                for (iDim = 0; iDim < numDims; iDim++, k+=numPixels) {\n                  val = 0;\n                  valTmp = (word << bitPos) >>> (32 - numBitsLUTQick);\n                  valTmpQuick = valTmp;\n                  if (32 - bitPos < numBitsLUTQick) {\n                    valTmp |= ((stuffedData[srcPtr + 1]) >>> (64 - bitPos - numBitsLUTQick));\n                    valTmpQuick = valTmp;\n                  }\n                  if (decodeLut[valTmpQuick])\n                  {\n                    val = decodeLut[valTmpQuick][1];\n                    bitPos += decodeLut[valTmpQuick][0];\n                  }\n                  else {\n                    valTmp = (word << bitPos) >>> (32 - numBitsLUT);\n                    valTmpQuick = valTmp;\n                    if (32 - bitPos < numBitsLUT) {\n                      valTmp |= ((stuffedData[srcPtr + 1]) >>> (64 - bitPos - numBitsLUT));\n                      valTmpQuick = valTmp;\n                    }\n                    node = tree;\n                    for (ii = 0; ii < numBitsLUT; ii++) {\n                      currentBit = valTmp >>> (numBitsLUT - ii - 1) & 1;\n                      node = currentBit ? node.right : node.left;\n                      if (!(node.left || node.right)) {\n                        val = node.val;\n                        bitPos = bitPos + ii + 1;\n                        break;\n                      }\n                    }\n                  }\n\n                  if (bitPos >= 32) {\n                    bitPos -= 32;\n                    srcPtr++;\n                    word = stuffedData[srcPtr];\n                  }\n\n                  delta = val - offset;\n                  resultPixels[k] = delta;\n                }\n              }\n            }\n          }\n        }\n        data.ptr = data.ptr + (srcPtr + 1) * 4 + (bitPos > 0 ? 4 : 0);\n        data.pixels.resultPixels = resultPixelsAllDim;\n        //swap for BIP layout\n        if (numDims > 1 && !useBSQForOutputDim) {\n          data.pixels.resultPixels = Lerc2Helpers.swapDimensionOrder(resultPixelsAllDim, numPixels, numDims, OutPixelTypeArray);\n        }\n      },\n\n      decodeBits: function(input, data, blockDataBuffer, offset, iDim) {\n        {\n          //bitstuff encoding is 3\n          var headerInfo = data.headerInfo;\n          var fileVersion = headerInfo.fileVersion;\n          //var block = {};\n          var blockPtr = 0;\n          var viewByteLength = ((input.byteLength - data.ptr) >= 5) ? 5 : (input.byteLength - data.ptr);\n          var view = new DataView(input, data.ptr, viewByteLength);\n          var headerByte = view.getUint8(0);\n          blockPtr++;\n          var bits67 = headerByte >> 6;\n          var n = (bits67 === 0) ? 4 : 3 - bits67;\n          var doLut = (headerByte & 32) > 0 ? true : false;//5th bit\n          var numBits = headerByte & 31;\n          var numElements = 0;\n          if (n === 1) {\n            numElements = view.getUint8(blockPtr); blockPtr++;\n          } else if (n === 2) {\n            numElements = view.getUint16(blockPtr, true); blockPtr += 2;\n          } else if (n === 4) {\n            numElements = view.getUint32(blockPtr, true); blockPtr += 4;\n          } else {\n            throw \"Invalid valid pixel count type\";\n          }\n          //fix: huffman codes are bit stuffed, but not bound by data's max value, so need to use originalUnstuff\n          //offset = offset || 0;\n          var scale = 2 * headerInfo.maxZError;\n          var stuffedData, arrayBuf, store8, dataBytes, dataWords;\n          var lutArr, lutData, lutBytes, lutBitsPerElement, bitsPerPixel;\n          var zMax = headerInfo.numDims > 1 ? headerInfo.maxValues[iDim] : headerInfo.zMax;\n          if (doLut) {\n            data.counter.lut++;\n            lutBytes = view.getUint8(blockPtr);\n            lutBitsPerElement = numBits;\n            blockPtr++;\n            dataBytes = Math.ceil((lutBytes - 1) * numBits / 8);\n            dataWords = Math.ceil(dataBytes / 4);\n            arrayBuf = new ArrayBuffer(dataWords * 4);\n            store8 = new Uint8Array(arrayBuf);\n\n            data.ptr += blockPtr;\n            store8.set(new Uint8Array(input, data.ptr, dataBytes));\n\n            lutData = new Uint32Array(arrayBuf);\n            data.ptr += dataBytes;\n\n            bitsPerPixel = 0;\n            while ((lutBytes - 1) >>> bitsPerPixel) {\n              bitsPerPixel++;\n            }\n            dataBytes = Math.ceil(numElements * bitsPerPixel / 8);\n            dataWords = Math.ceil(dataBytes / 4);\n            arrayBuf = new ArrayBuffer(dataWords * 4);\n            store8 = new Uint8Array(arrayBuf);\n            store8.set(new Uint8Array(input, data.ptr, dataBytes));\n            stuffedData = new Uint32Array(arrayBuf);\n            data.ptr += dataBytes;\n            if (fileVersion >= 3) {\n              lutArr = BitStuffer.unstuffLUT2(lutData, numBits, lutBytes - 1, offset, scale, zMax);\n            }\n            else {\n              lutArr = BitStuffer.unstuffLUT(lutData, numBits, lutBytes - 1, offset, scale, zMax);\n            }\n            //lutArr.unshift(0);\n            if (fileVersion >= 3) {\n              //BitStuffer.unstuff2(block, blockDataBuffer, headerInfo.zMax);\n              BitStuffer.unstuff2(stuffedData, blockDataBuffer, bitsPerPixel, numElements, lutArr);\n            }\n            else {\n              BitStuffer.unstuff(stuffedData, blockDataBuffer, bitsPerPixel, numElements, lutArr);\n            }\n          }\n          else {\n            //console.debug(\"bitstuffer\");\n            data.counter.bitstuffer++;\n            bitsPerPixel = numBits;\n            data.ptr += blockPtr;\n            if (bitsPerPixel > 0) {\n              dataBytes = Math.ceil(numElements * bitsPerPixel / 8);\n              dataWords = Math.ceil(dataBytes / 4);\n              arrayBuf = new ArrayBuffer(dataWords * 4);\n              store8 = new Uint8Array(arrayBuf);\n              store8.set(new Uint8Array(input, data.ptr, dataBytes));\n              stuffedData = new Uint32Array(arrayBuf);\n              data.ptr += dataBytes;\n              if (fileVersion >= 3) {\n                if (offset == null) {\n                  BitStuffer.originalUnstuff2(stuffedData, blockDataBuffer, bitsPerPixel, numElements);\n                }\n                else {\n                  BitStuffer.unstuff2(stuffedData, blockDataBuffer, bitsPerPixel, numElements, false, offset, scale, zMax);\n                }\n              }\n              else {\n                if (offset == null) {\n                  BitStuffer.originalUnstuff(stuffedData, blockDataBuffer, bitsPerPixel, numElements);\n                }\n                else {\n                  BitStuffer.unstuff(stuffedData, blockDataBuffer, bitsPerPixel, numElements, false, offset, scale, zMax);\n                }\n              }\n            }\n          }\n        }\n\n      },\n\n      readTiles: function(input, data, OutPixelTypeArray, useBSQForOutputDim) {\n        var headerInfo = data.headerInfo;\n        var width = headerInfo.width;\n        var height = headerInfo.height;\n        var numPixels = width * height;\n        var microBlockSize = headerInfo.microBlockSize;\n        var imageType = headerInfo.imageType;\n        var dataTypeSize = Lerc2Helpers.getDataTypeSize(imageType);\n        var numBlocksX = Math.ceil(width / microBlockSize);\n        var numBlocksY = Math.ceil(height / microBlockSize);\n        data.pixels.numBlocksY = numBlocksY;\n        data.pixels.numBlocksX = numBlocksX;\n        data.pixels.ptr = 0;\n        var row = 0, col = 0, blockY = 0, blockX = 0, thisBlockHeight = 0, thisBlockWidth = 0, bytesLeft = 0, headerByte = 0, bits67 = 0, testCode = 0, outPtr = 0, outStride = 0, numBytes = 0, bytesleft = 0, z = 0, blockPtr = 0;\n        var view, block, arrayBuf, store8, rawData;\n        var blockEncoding;\n        var blockDataBuffer = new OutPixelTypeArray(microBlockSize * microBlockSize);\n        var lastBlockHeight = (height % microBlockSize) || microBlockSize;\n        var lastBlockWidth = (width % microBlockSize) || microBlockSize;\n        var offsetType, offset;\n        var numDims = headerInfo.numDims, iDim;\n        var mask = data.pixels.resultMask;\n        var resultPixels = data.pixels.resultPixels;\n        var fileVersion = headerInfo.fileVersion;\n        var fileVersionCheckNum = fileVersion >= 5 ? 14 : 15;\n        var isDiffEncoding;\n        var zMax = headerInfo.zMax;\n        //var resultPixelsAllDim = resultPixels;\n        var resultPixelsPrevDim;\n        for (blockY = 0; blockY < numBlocksY; blockY++) {\n          thisBlockHeight = (blockY !== numBlocksY - 1) ? microBlockSize : lastBlockHeight;\n          for (blockX = 0; blockX < numBlocksX; blockX++) {\n            //console.debug(\"y\" + blockY + \" x\" + blockX);\n            thisBlockWidth = (blockX !== numBlocksX - 1) ? microBlockSize : lastBlockWidth;\n\n            outPtr = blockY * width * microBlockSize + blockX * microBlockSize;\n            outStride = width - thisBlockWidth;\n\n            for (iDim = 0; iDim < numDims; iDim++) {\n              if (numDims > 1) {\n                resultPixelsPrevDim = resultPixels;\n                outPtr = blockY * width * microBlockSize + blockX * microBlockSize;\n                resultPixels = new OutPixelTypeArray(data.pixels.resultPixels.buffer, numPixels * iDim * dataTypeSize, numPixels);\n                zMax = headerInfo.maxValues[iDim];\n              } else {\n                resultPixelsPrevDim = null;\n              }\n              bytesLeft = input.byteLength - data.ptr;\n              view = new DataView(input, data.ptr, Math.min(10, bytesLeft));\n              block = {};\n              blockPtr = 0;\n              headerByte = view.getUint8(0);\n              blockPtr++;\n              isDiffEncoding = headerInfo.fileVersion >= 5 ? headerByte & 4 : 0;\n              bits67 = (headerByte >> 6) & 0xFF;\n              testCode = (headerByte >> 2) & fileVersionCheckNum;    // use bits 2345 for integrity check\n              if (testCode !== (((blockX * microBlockSize) >> 3) & fileVersionCheckNum)) {\n                throw \"integrity issue\";\n              }\n\n              if (isDiffEncoding && iDim === 0) {\n                throw \"integrity issue\";\n              }\n\n              blockEncoding = headerByte & 3;\n              if (blockEncoding > 3) {\n                data.ptr += blockPtr;\n                throw \"Invalid block encoding (\" + blockEncoding + \")\";\n              }\n              else if (blockEncoding === 2) { //constant 0\n                if (isDiffEncoding) {\n                  if (mask) {\n                    for (row = 0; row < thisBlockHeight; row++) {\n                      for (col = 0; col < thisBlockWidth; col++) {\n                        if (mask[outPtr]) {\n                          resultPixels[outPtr] = resultPixelsPrevDim[outPtr];\n                        }\n                        outPtr++;\n                      }\n                    }\n                  }\n                  else {\n                    for (row = 0; row < thisBlockHeight; row++) {\n                      for (col = 0; col < thisBlockWidth; col++) {\n                        resultPixels[outPtr] = resultPixelsPrevDim[outPtr];\n                        outPtr++;\n                      }\n                    }\n                  }\n                }\n                data.counter.constant++;\n                data.ptr += blockPtr;\n                continue;\n              }\n              else if (blockEncoding === 0) {  //uncompressed\n                if (isDiffEncoding) {\n                  // doesn't make sense, should not happen\n                  throw \"integrity issue\";\n                }\n                data.counter.uncompressed++;\n                data.ptr += blockPtr;\n                numBytes = thisBlockHeight * thisBlockWidth * dataTypeSize;\n                bytesleft = input.byteLength - data.ptr;\n                numBytes = numBytes < bytesleft ? numBytes : bytesleft;\n                //bit alignment\n                arrayBuf = new ArrayBuffer((numBytes % dataTypeSize) === 0 ? numBytes : (numBytes + dataTypeSize - numBytes % dataTypeSize));\n                store8 = new Uint8Array(arrayBuf);\n                store8.set(new Uint8Array(input, data.ptr, numBytes));\n                rawData = new OutPixelTypeArray(arrayBuf);\n                z = 0;\n                if (mask) {\n                  for (row = 0; row < thisBlockHeight; row++) {\n                    for (col = 0; col < thisBlockWidth; col++) {\n                      if (mask[outPtr]) {\n                        resultPixels[outPtr] = rawData[z++];\n                      }\n                      outPtr++;\n                    }\n                    outPtr += outStride;\n                  }\n                }\n                else {//all valid\n                  for (row = 0; row < thisBlockHeight; row++) {\n                    for (col = 0; col < thisBlockWidth; col++) {\n                      resultPixels[outPtr++] = rawData[z++];\n                    }\n                    outPtr += outStride;\n                  }\n                }\n                data.ptr += z * dataTypeSize;\n              }\n              else { //1 or 3\n                offsetType = Lerc2Helpers.getDataTypeUsed((isDiffEncoding && imageType < 6) ? 4 : imageType, bits67);\n                offset = Lerc2Helpers.getOnePixel(block, blockPtr, offsetType, view);\n                blockPtr += Lerc2Helpers.getDataTypeSize(offsetType);\n                if (blockEncoding === 3) //constant offset value\n                {\n                  data.ptr += blockPtr;\n                  data.counter.constantoffset++;\n                  //you can delete the following resultMask case in favor of performance because val is constant and users use nodata mask, otherwise nodatavalue post processing handles it too.\n                  //while the above statement is true, we're not doing it as we want to keep invalid pixel value at 0 rather than arbitrary values\n                  if (mask) {\n                    for (row = 0; row < thisBlockHeight; row++) {\n                      for (col = 0; col < thisBlockWidth; col++) {\n                        if (mask[outPtr]) {\n                          resultPixels[outPtr] = isDiffEncoding ? Math.min(zMax, resultPixelsPrevDim[outPtr] + offset) : offset;\n                        }\n                        outPtr++;\n                      }\n                      outPtr += outStride;\n                    }\n                  }\n                  else {\n                    for (row = 0; row < thisBlockHeight; row++) {\n                      for (col = 0; col < thisBlockWidth; col++) {\n                        resultPixels[outPtr] = isDiffEncoding ? Math.min(zMax, resultPixelsPrevDim[outPtr] + offset) : offset;\n                        outPtr++;\n                      }\n                      outPtr += outStride;\n                    }\n                  }\n                }\n                else { //bitstuff encoding is 3\n                  data.ptr += blockPtr;\n                  //heavy lifting\n                  Lerc2Helpers.decodeBits(input, data, blockDataBuffer, offset, iDim);\n                  blockPtr = 0;\n                  // duplicate code to favor performance, diff encoding is for multidimension only\n                  if (isDiffEncoding) {\n                    if (mask) {\n                      for (row = 0; row < thisBlockHeight; row++) {\n                        for (col = 0; col < thisBlockWidth; col++) {\n                          if (mask[outPtr]) {\n                            resultPixels[outPtr] = blockDataBuffer[blockPtr++] + resultPixelsPrevDim[outPtr];\n                          }\n                          outPtr++;\n                        }\n                        outPtr += outStride;\n                      }\n                    }\n                    else {\n                      for (row = 0; row < thisBlockHeight; row++) {\n                        for (col = 0; col < thisBlockWidth; col++) {\n                          resultPixels[outPtr] = blockDataBuffer[blockPtr++] + resultPixelsPrevDim[outPtr];\n                          outPtr++;\n                        }\n                        outPtr += outStride;\n                      }\n                    }\n                  }\n                  else if (mask) {\n                    for (row = 0; row < thisBlockHeight; row++) {\n                      for (col = 0; col < thisBlockWidth; col++) {\n                        if (mask[outPtr]) {\n                          resultPixels[outPtr] = blockDataBuffer[blockPtr++];\n                        }\n                        outPtr++;\n                      }\n                      outPtr += outStride;\n                    }\n                  }\n                  else {\n                    for (row = 0; row < thisBlockHeight; row++) {\n                      for (col = 0; col < thisBlockWidth; col++) {\n                        resultPixels[outPtr++] = blockDataBuffer[blockPtr++];\n                      }\n                      outPtr += outStride;\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n        //swap for BIP: it's always easier for clients to handle BSQ so we keep existing logic and introduce a swap here to minimze changes\n        if (numDims > 1 && !useBSQForOutputDim) {\n          data.pixels.resultPixels = Lerc2Helpers.swapDimensionOrder(data.pixels.resultPixels, numPixels, numDims, OutPixelTypeArray);\n        }\n      },\n\n      /*****************\n      *  private methods (helper methods)\n      *****************/\n\n      formatFileInfo: function(data) {\n        return {\n          \"fileIdentifierString\": data.headerInfo.fileIdentifierString,\n          \"fileVersion\": data.headerInfo.fileVersion,\n          \"imageType\": data.headerInfo.imageType,\n          \"height\": data.headerInfo.height,\n          \"width\": data.headerInfo.width,\n          \"numValidPixel\": data.headerInfo.numValidPixel,\n          \"microBlockSize\": data.headerInfo.microBlockSize,\n          \"blobSize\": data.headerInfo.blobSize,\n          \"maxZError\": data.headerInfo.maxZError,\n          \"pixelType\": Lerc2Helpers.getPixelType(data.headerInfo.imageType),\n          \"eofOffset\": data.eofOffset,\n          \"mask\": data.mask ? {\n            \"numBytes\": data.mask.numBytes\n          } : null,\n          \"pixels\": {\n            \"numBlocksX\": data.pixels.numBlocksX,\n            \"numBlocksY\": data.pixels.numBlocksY,\n            //\"numBytes\": data.pixels.numBytes,\n            \"maxValue\": data.headerInfo.zMax,\n            \"minValue\": data.headerInfo.zMin,\n            \"noDataValue\": data.noDataValue\n          }\n        };\n      },\n\n      constructConstantSurface: function(data, useBSQForOutputDim) {\n        var val = data.headerInfo.zMax;\n        var valMin = data.headerInfo.zMin;\n        var maxValues = data.headerInfo.maxValues;\n        var numDims = data.headerInfo.numDims;\n        var numPixels = data.headerInfo.height * data.headerInfo.width;\n        var i = 0, k = 0, nStart = 0;\n        var mask = data.pixels.resultMask;\n        var resultPixels = data.pixels.resultPixels;\n        if (mask) {\n          if (numDims > 1) {\n            if (useBSQForOutputDim) {\n              for (i = 0; i < numDims; i++) {\n                nStart = i * numPixels;\n                val = maxValues[i];\n                for (k = 0; k < numPixels; k++) {\n                  if (mask[k]) {\n                    resultPixels[nStart + k] = val;\n                  }\n                }\n              }  \n            }\n            else {\n              for (k = 0; k < numPixels; k++) {\n                if (mask[k]) {\n                  nStart = k * numDims;\n                  for (i = 0; i < numDims; i++) {\n                    resultPixels[nStart + numDims] = maxValues[i];\n                  }\n                }\n              }\n            }\n          }\n          else {\n            for (k = 0; k < numPixels; k++) {\n              if (mask[k]) {\n                resultPixels[k] = val;\n              }\n            }\n          }\n        }\n        else {\n          if (numDims > 1 && valMin !== val) {\n            if (useBSQForOutputDim) {\n              for (i = 0; i < numDims; i++) {\n                nStart = i * numPixels;\n                val = maxValues[i];\n                for (k = 0; k < numPixels; k++) {\n                  resultPixels[nStart + k] = val;\n                }\n              }\n            }\n            else {\n              for (k = 0; k < numPixels; k++) {\n                nStart = k * numDims;\n                for (i = 0; i < numDims; i++) {\n                  resultPixels[nStart + i] = maxValues[i];\n                }\n              }\n            }\n          }\n          else {\n            for (k = 0; k < numPixels * numDims; k++) {\n              resultPixels[k] = val;\n            }\n          }\n        }\n        return;\n      },\n\n      getDataTypeArray: function(t) {\n        var tp;\n        switch (t) {\n          case 0: //char\n            tp = Int8Array;\n            break;\n          case 1: //byte\n            tp = Uint8Array;\n            break;\n          case 2: //short\n            tp = Int16Array;\n            break;\n          case 3: //ushort\n            tp = Uint16Array;\n            break;\n          case 4:\n            tp = Int32Array;\n            break;\n          case 5:\n            tp = Uint32Array;\n            break;\n          case 6:\n            tp = Float32Array;\n            break;\n          case 7:\n            tp = Float64Array;\n            break;\n          default:\n            tp = Float32Array;\n        }\n        return tp;\n      },\n\n      getPixelType: function(t) {\n        var tp;\n        switch (t) {\n          case 0: //char\n            tp = \"S8\";\n            break;\n          case 1: //byte\n            tp = \"U8\";\n            break;\n          case 2: //short\n            tp = \"S16\";\n            break;\n          case 3: //ushort\n            tp = \"U16\";\n            break;\n          case 4:\n            tp = \"S32\";\n            break;\n          case 5:\n            tp = \"U32\";\n            break;\n          case 6:\n            tp = \"F32\";\n            break;\n          case 7:\n            tp = \"F64\";\n            break;\n          default:\n            tp = \"F32\";\n        }\n        return tp;\n      },\n\n      isValidPixelValue: function(t, val) {\n        if (val == null) {\n          return false;\n        }\n        var isValid;\n        switch (t) {\n          case 0: //char\n            isValid = val >= -128 && val <= 127;\n            break;\n          case 1: //byte  (unsigned char)\n            isValid = val >= 0 && val <= 255;\n            break;\n          case 2: //short\n            isValid = val >= -32768 && val <= 32767;\n            break;\n          case 3: //ushort\n            isValid = val >= 0 && val <= 65536;\n            break;\n          case 4: //int 32\n            isValid = val >= -2147483648 && val <= 2147483647;\n            break;\n          case 5: //uinit 32\n            isValid = val >= 0 && val <= 4294967296;\n            break;\n          case 6:\n            isValid = val >= -3.4027999387901484e+38 && val <= 3.4027999387901484e+38;\n            break;\n          case 7:\n            isValid = val >= -1.7976931348623157e+308 && val <= 1.7976931348623157e+308;\n            break;\n          default:\n            isValid = false;\n        }\n        return isValid;\n      },\n\n      getDataTypeSize: function(t) {\n        var s = 0;\n        switch (t) {\n          case 0: //ubyte\n          case 1: //byte\n            s = 1;\n            break;\n          case 2: //short\n          case 3: //ushort\n            s = 2;\n            break;\n          case 4:\n          case 5:\n          case 6:\n            s = 4;\n            break;\n          case 7:\n            s = 8;\n            break;\n          default:\n            s = t;\n        }\n        return s;\n      },\n\n      getDataTypeUsed: function(dt, tc) {\n        var t = dt;\n        switch (dt) {\n          case 2: //short\n          case 4: //long\n            t = dt - tc;\n            break;\n          case 3: //ushort\n          case 5: //ulong\n            t = dt - 2 * tc;\n            break;\n          case 6: //float\n            if (0 === tc) {\n              t = dt;\n            }\n            else if (1 === tc) {\n              t = 2;\n            }\n            else {\n              t = 1;//byte\n            }\n            break;\n          case 7: //double\n            if (0 === tc) {\n              t = dt;\n            }\n            else {\n              t = dt - 2 * tc + 1;\n            }\n            break;\n          default:\n            t = dt;\n            break;\n        }\n        return t;\n      },\n\n      getOnePixel: function(block, blockPtr, offsetType, view) {\n        var temp = 0;\n        switch (offsetType) {\n          case 0: //char\n            temp = view.getInt8(blockPtr);\n            break;\n          case 1: //byte\n            temp = view.getUint8(blockPtr);\n            break;\n          case 2:\n            temp = view.getInt16(blockPtr, true);\n            break;\n          case 3:\n            temp = view.getUint16(blockPtr, true);\n            break;\n          case 4:\n            temp = view.getInt32(blockPtr, true);\n            break;\n          case 5:\n            temp = view.getUInt32(blockPtr, true);\n            break;\n          case 6:\n            temp = view.getFloat32(blockPtr, true);\n            break;\n          case 7:\n            temp = view.getFloat64(blockPtr, true);\n            break;\n          default:\n            throw (\"the decoder does not understand this pixel type\");\n        }\n        return temp;\n      },\n\n      swapDimensionOrder: function(pixels, numPixels, numDims, OutPixelTypeArray, inputIsBIP) {\n        var i = 0, j = 0, iDim = 0, temp = 0, swap = pixels;\n        if (numDims > 1) {\n          swap = new OutPixelTypeArray(numPixels * numDims);\n          if (inputIsBIP) {\n            for (i=0; i<numPixels; i++) {\n              temp = i;\n              for (iDim=0; iDim < numDims; iDim++, temp += numPixels) {\n                swap[temp] = pixels[j++];\n              }\n            }  \n          }\n          else {\n            for (i=0; i<numPixels; i++) {\n              temp = i;\n              for (iDim=0; iDim < numDims; iDim++, temp += numPixels) {\n                swap[j++] = pixels[temp];\n              }\n            }\n          }\n        }\n        return swap;\n      }\n    };\n\n    /***************************************************\n    *private class for a tree node. Huffman code is in Lerc2Helpers\n    ****************************************************/\n    var TreeNode = function(val, left, right) {\n      this.val = val;\n      this.left = left;\n      this.right = right;\n    };\n\n    var Lerc2Decode = {\n      /*\n      * ********removed options compared to LERC1. We can bring some of them back if needed.\n       * removed pixel type. LERC2 is typed and doesn't require user to give pixel type\n       * changed encodedMaskData to maskData. LERC2 's js version make it faster to use maskData directly.\n       * removed returnMask. mask is used by LERC2 internally and is cost free. In case of user input mask, it's returned as well and has neglible cost.\n       * removed nodatavalue. Because LERC2 pixels are typed, nodatavalue will sacrify a useful value for many types (8bit, 16bit) etc,\n       *       user has to be knowledgable enough about raster and their data to avoid usability issues. so nodata value is simply removed now.\n       *       We can add it back later if their's a clear requirement.\n       * removed encodedMask. This option was not implemented in LercDecode. It can be done after decoding (less efficient)\n       * removed computeUsedBitDepths.\n       *\n       *\n       * response changes compared to LERC1\n       * 1. encodedMaskData is not available\n       * 2. noDataValue is optional (returns only if user's noDataValue is with in the valid data type range)\n       * 3. maskData is always available\n      */\n      /*****************\n      *  public properties\n      ******************/\n      //HUFFMAN_LUT_BITS_MAX: 12, //use 2^12 lut, not configurable\n\n      /*****************\n      *  public methods\n      *****************/\n\n      /**\n       * Decode a LERC2 byte stream and return an object containing the pixel data and optional metadata.\n       *\n       * @param {ArrayBuffer} input The LERC input byte stream\n       * @param {object} [options] options Decoding options\n       * @param {number} [options.inputOffset] The number of bytes to skip in the input byte stream. A valid LERC file is expected at that position\n       * @param {boolean} [options.returnFileInfo] If true, the return value will have a fileInfo property that contains metadata obtained from the LERC headers and the decoding process\n       * @param {boolean} [options.returnPixelInterleavedDims]  If true, returned dimensions are pixel-interleaved, a.k.a [p1_dim0, p1_dim1, p1_dimn, p2_dim0...], default is [p1_dim0, p2_dim0, ..., p1_dim1, p2_dim1...]\n       */\n      decode: function(/*byte array*/ input, /*object*/ options) {\n        //currently there's a bug in the sparse array, so please do not set to false\n        options = options || {};\n        var noDataValue = options.noDataValue;\n\n        //initialize\n        var i = 0, data = {};\n        data.ptr = options.inputOffset || 0;\n        data.pixels = {};\n\n        // File header\n        if (!Lerc2Helpers.readHeaderInfo(input, data)) {\n          return;\n        }\n\n        var headerInfo = data.headerInfo;\n        var fileVersion = headerInfo.fileVersion;\n        var OutPixelTypeArray = Lerc2Helpers.getDataTypeArray(headerInfo.imageType);\n\n        // version check\n        if (fileVersion > 5) {\n          throw \"unsupported lerc version 2.\" + fileVersion;\n        }\n\n        // Mask Header\n        Lerc2Helpers.readMask(input, data);\n        if (headerInfo.numValidPixel !== headerInfo.width * headerInfo.height && !data.pixels.resultMask) {\n          data.pixels.resultMask = options.maskData;\n        }\n\n        var numPixels = headerInfo.width * headerInfo.height;\n        data.pixels.resultPixels = new OutPixelTypeArray(numPixels * headerInfo.numDims);\n\n        data.counter = {\n          onesweep: 0,\n          uncompressed: 0,\n          lut: 0,\n          bitstuffer: 0,\n          constant: 0,\n          constantoffset: 0\n        };\n        var useBSQForOutputDim = !options.returnPixelInterleavedDims;\n        if (headerInfo.numValidPixel !== 0) {\n          //not tested\n          if (headerInfo.zMax === headerInfo.zMin) //constant surface\n          {\n            Lerc2Helpers.constructConstantSurface(data, useBSQForOutputDim);\n          }\n          else if (fileVersion >= 4 && Lerc2Helpers.checkMinMaxRanges(input, data)) {\n            Lerc2Helpers.constructConstantSurface(data, useBSQForOutputDim);\n          }\n          else {\n            var view = new DataView(input, data.ptr, 2);\n            var bReadDataOneSweep = view.getUint8(0);\n            data.ptr++;\n            if (bReadDataOneSweep) {\n              //console.debug(\"OneSweep\");\n              Lerc2Helpers.readDataOneSweep(input, data, OutPixelTypeArray, useBSQForOutputDim);\n            }\n            else {\n              //lerc2.1: //bitstuffing + lut\n              //lerc2.2: //bitstuffing + lut + huffman\n              //lerc2.3: new bitstuffer\n              if (fileVersion > 1 && headerInfo.imageType <= 1 && Math.abs(headerInfo.maxZError - 0.5) < 0.00001) {\n                //this is 2.x plus 8 bit (unsigned and signed) data, possiblity of Huffman\n                var flagHuffman = view.getUint8(1);\n                data.ptr++;\n                data.encodeMode = flagHuffman;\n                if (flagHuffman > 2 || (fileVersion < 4 && flagHuffman > 1)) {\n                  throw \"Invalid Huffman flag \" + flagHuffman;\n                }\n                if (flagHuffman) {//1 - delta Huffman, 2 - Huffman\n                  //console.log(\"Huffman\");\n                  Lerc2Helpers.readHuffman(input, data, OutPixelTypeArray, useBSQForOutputDim);\n                }\n                else {\n                  //console.log(\"Tiles\");\n                  Lerc2Helpers.readTiles(input, data, OutPixelTypeArray, useBSQForOutputDim);\n                }\n              }\n              else { //lerc2.x non-8 bit data\n                //console.log(\"Tiles\");\n                Lerc2Helpers.readTiles(input, data, OutPixelTypeArray, useBSQForOutputDim);\n              }\n            }\n          }\n        }\n\n        data.eofOffset = data.ptr;\n        var diff;\n        if (options.inputOffset) {\n          diff = data.headerInfo.blobSize + options.inputOffset - data.ptr;\n          if (Math.abs(diff) >= 1) {\n            //console.debug(\"incorrect eof: dataptr \" + data.ptr + \" offset \" + options.inputOffset + \" blobsize \" + data.headerInfo.blobSize + \" diff: \" + diff);\n            data.eofOffset = options.inputOffset + data.headerInfo.blobSize;\n          }\n        }\n        else {\n          diff = data.headerInfo.blobSize - data.ptr;\n          if (Math.abs(diff) >= 1) {\n            //console.debug(\"incorrect first band eof: dataptr \" + data.ptr + \" blobsize \" + data.headerInfo.blobSize + \" diff: \" + diff);\n            data.eofOffset = data.headerInfo.blobSize;\n          }\n        }\n\n        var result = {\n          width: headerInfo.width,\n          height: headerInfo.height,\n          pixelData: data.pixels.resultPixels,\n          minValue: headerInfo.zMin,\n          maxValue: headerInfo.zMax,\n          validPixelCount: headerInfo.numValidPixel,\n          dimCount: headerInfo.numDims,\n          dimStats: {\n            minValues: headerInfo.minValues,\n            maxValues: headerInfo.maxValues\n          },\n          maskData: data.pixels.resultMask\n          //noDataValue: noDataValue\n        };\n\n        //we should remove this if there's no existing client\n        //optional noDataValue processing, it's user's responsiblity\n        if (data.pixels.resultMask && Lerc2Helpers.isValidPixelValue(headerInfo.imageType, noDataValue)) {\n          var mask = data.pixels.resultMask;\n          for (i = 0; i < numPixels; i++) {\n            if (!mask[i]) {\n              result.pixelData[i] = noDataValue;\n            }\n          }\n          result.noDataValue = noDataValue;\n        }\n        data.noDataValue = noDataValue;\n        if (options.returnFileInfo) {\n          result.fileInfo = Lerc2Helpers.formatFileInfo(data);\n        }\n        return result;\n      },\n\n      getBandCount: function(/*byte array*/ input) {\n        var count = 0;\n        var i = 0;\n        var temp = {};\n        temp.ptr = 0;\n        temp.pixels = {};\n        while (i < input.byteLength - 58) {\n          Lerc2Helpers.readHeaderInfo(input, temp);\n          i += temp.headerInfo.blobSize;\n          count++;\n          temp.ptr = i;\n        }\n        return count;\n      }\n    };\n\n    return Lerc2Decode;\n  })();\n\n  var isPlatformLittleEndian = (function() {\n    var a = new ArrayBuffer(4);\n    var b = new Uint8Array(a);\n    var c = new Uint32Array(a);\n    c[0] = 1;\n    return b[0] === 1;\n  })();\n\n  var Lerc = {\n    /************wrapper**********************************************/\n    /**\n     * A wrapper for decoding both LERC1 and LERC2 byte streams capable of handling multiband pixel blocks for various pixel types.\n     *\n     * @alias module:Lerc\n     * @param {ArrayBuffer} input The LERC input byte stream\n     * @param {object} [options] The decoding options below are optional.\n     * @param {number} [options.inputOffset] The number of bytes to skip in the input byte stream. A valid Lerc file is expected at that position.\n     * @param {string} [options.pixelType] (LERC1 only) Default value is F32. Valid pixel types for input are U8/S8/S16/U16/S32/U32/F32.\n     * @param {number} [options.noDataValue] (LERC1 only). It is recommended to use the returned mask instead of setting this value.\n     * @param {boolean} [options.returnPixelInterleavedDims] (nDim LERC2 only) If true, returned dimensions are pixel-interleaved, a.k.a [p1_dim0, p1_dim1, p1_dimn, p2_dim0...], default is [p1_dim0, p2_dim0, ..., p1_dim1, p2_dim1...]\n     * @returns {{width, height, pixels, pixelType, mask, statistics}}\n       * @property {number} width Width of decoded image.\n       * @property {number} height Height of decoded image.\n       * @property {array} pixels [band1, band2, …] Each band is a typed array of width*height.\n       * @property {string} pixelType The type of pixels represented in the output.\n       * @property {mask} mask Typed array with a size of width*height, or null if all pixels are valid.\n       * @property {array} statistics [statistics_band1, statistics_band2, …] Each element is a statistics object representing min and max values\n    **/\n    decode: function(encodedData, options) {\n      if (!isPlatformLittleEndian) {\n        throw \"Big endian system is not supported.\";\n      }\n      options = options || {};\n      var inputOffset = options.inputOffset || 0;\n      var fileIdView = new Uint8Array(encodedData, inputOffset, 10);\n      var fileIdentifierString = String.fromCharCode.apply(null, fileIdView);\n      var lerc, majorVersion;\n      if (fileIdentifierString.trim() === \"CntZImage\") {\n        lerc = LercDecode;\n        majorVersion = 1;\n      }\n      else if (fileIdentifierString.substring(0, 5) === \"Lerc2\") {\n        lerc = Lerc2Decode;\n        majorVersion = 2;\n      }\n      else {\n        throw \"Unexpected file identifier string: \" + fileIdentifierString;\n      }\n\n      var iPlane = 0, eof = encodedData.byteLength - 10, encodedMaskData, bandMasks = [], bandMask, maskData;\n      var decodedPixelBlock = {\n        width: 0,\n        height: 0,\n        pixels: [],\n        pixelType: options.pixelType,\n        mask: null,\n        statistics: []\n      };\n      var uniqueBandMaskCount = 0;\n\n      while (inputOffset < eof) {\n        var result = lerc.decode(encodedData, {\n          inputOffset: inputOffset,//for both lerc1 and lerc2\n          encodedMaskData: encodedMaskData,//lerc1 only\n          maskData: maskData,//lerc2 only\n          returnMask: iPlane === 0 ? true : false,//lerc1 only\n          returnEncodedMask: iPlane === 0 ? true : false,//lerc1 only\n          returnFileInfo: true,//for both lerc1 and lerc2\n          returnPixelInterleavedDims: options.returnPixelInterleavedDims,//for ndim lerc2 only\n          pixelType: options.pixelType || null,//lerc1 only\n          noDataValue: options.noDataValue || null//lerc1 only\n        });\n\n        inputOffset = result.fileInfo.eofOffset;\n        maskData = result.maskData;//lerc2\n        if (iPlane === 0) {\n          encodedMaskData = result.encodedMaskData;//lerc1\n          decodedPixelBlock.width = result.width;\n          decodedPixelBlock.height = result.height;\n          decodedPixelBlock.dimCount = result.dimCount || 1;\n          //decodedPixelBlock.dimStats = decodedPixelBlock.dimStats;\n          decodedPixelBlock.pixelType = result.pixelType || result.fileInfo.pixelType;\n          decodedPixelBlock.mask = maskData;\n        }\n        if (majorVersion > 1) {\n          if (maskData) {\n            bandMasks.push(maskData);\n          }\n          if (result.fileInfo.mask && result.fileInfo.mask.numBytes > 0) {\n            uniqueBandMaskCount++;\n          }\n        }\n\n        iPlane++;\n        decodedPixelBlock.pixels.push(result.pixelData);\n        decodedPixelBlock.statistics.push({\n          minValue: result.minValue,\n          maxValue: result.maxValue,\n          noDataValue: result.noDataValue,\n          dimStats: result.dimStats\n        });\n      }\n      var i, j, numPixels;\n      if (majorVersion > 1 && uniqueBandMaskCount > 1) {\n        numPixels = decodedPixelBlock.width * decodedPixelBlock.height;\n        decodedPixelBlock.bandMasks = bandMasks;\n        maskData = new Uint8Array(numPixels);\n        maskData.set(bandMasks[0]);\n        for (i = 1; i < bandMasks.length; i++) {\n          bandMask = bandMasks[i];\n          for (j = 0; j < numPixels; j++) {\n            maskData[j] = maskData[j] & bandMask[j];\n          }\n        }\n        decodedPixelBlock.maskData = maskData;\n      }\n\n      return decodedPixelBlock;\n    }\n  };\n\n  if (typeof define === \"function\" && define.amd) {/* jshint ignore:line */\n    //amd loaders such as dojo and requireJS\n    //http://wiki.commonjs.org/wiki/Modules/AsynchronousDefinition\n    define([], function() { return Lerc; });/* jshint ignore:line */\n  }\n  else if (typeof module !== \"undefined\" && module.exports) {/* jshint ignore:line */\n    //commonJS module 1.0/1.1/1.1.1 systems, such as nodeJS\n    //http://wiki.commonjs.org/wiki/Modules\n    module.exports = Lerc;/* jshint ignore:line */\n  }\n  else {\n    //assign to this, most likely window\n    this.Lerc = Lerc;\n  }\n\n})();\n","interface DecoderExports {\n\tmemory: Uint8Array;\n\n\tZSTD_findDecompressedSize: (compressedPtr: number, compressedSize: number) => BigInt;\n\tZSTD_decompress: (uncompressedPtr: number, uncompressedSize: number, compressedPtr: number, compressedSize: number) => number;\n\tmalloc: (ptr: number) => number;\n\tfree: (ptr: number) => void;\n}\n\nlet init: Promise<void>;\nlet instance: {exports: DecoderExports};\nlet heap: Uint8Array;\n\nconst IMPORT_OBJECT = {\n\n\tenv: {\n\n\t\temscripten_notify_memory_growth: function ( index: number ): void {\n\n\t\t\theap = new Uint8Array( instance.exports.memory.buffer );\n\n\t\t}\n\n\t}\n\n};\n\n/**\n * ZSTD (Zstandard) decoder.\n */\nexport class ZSTDDecoder {\n\n\tinit (): Promise<void> {\n\n\t\tif ( init ) return init;\n\n\t\tif ( typeof fetch !== 'undefined' ) {\n\n\t\t\t// Web.\n\n\t\t\tinit = fetch( 'data:application/wasm;base64,' + wasm )\n\t\t\t\t.then( ( response ) => response.arrayBuffer() )\n\t\t\t\t.then( ( arrayBuffer ) => WebAssembly.instantiate( arrayBuffer, IMPORT_OBJECT ) )\n\t\t\t\t.then( this._init );\n\n\t\t} else {\n\n\t\t\t// Node.js.\n\n\t\t\tinit = WebAssembly\n\t\t\t\t.instantiate( Buffer.from( wasm, 'base64' ), IMPORT_OBJECT )\n\t\t\t\t.then( this._init );\n\n\t\t}\n\n\t\treturn init;\n\n\t}\n\n\t_init ( result: WebAssembly.WebAssemblyInstantiatedSource ): void {\n\n\t\tinstance = result.instance as unknown as { exports: DecoderExports };\n\n\t\tIMPORT_OBJECT.env.emscripten_notify_memory_growth( 0 ); // initialize heap.\n\n\t}\n\n\tdecode ( array: Uint8Array, uncompressedSize = 0 ): Uint8Array {\n\n\t\tif ( ! instance ) throw new Error( `ZSTDDecoder: Await .init() before decoding.` );\n\n\t\t// Write compressed data into WASM memory.\n\t\tconst compressedSize = array.byteLength;\n\t\tconst compressedPtr = instance.exports.malloc( compressedSize );\n\t\theap.set( array, compressedPtr );\n\n\t\t// Decompress into WASM memory.\n\t\tuncompressedSize = uncompressedSize || Number( instance.exports.ZSTD_findDecompressedSize( compressedPtr, compressedSize ) );\n\t\tconst uncompressedPtr = instance.exports.malloc( uncompressedSize );\n\t\tconst actualSize = instance.exports.ZSTD_decompress( uncompressedPtr, uncompressedSize, compressedPtr, compressedSize );\n\n\t\t// Read decompressed data and free WASM memory.\n\t\tconst dec = heap.slice( uncompressedPtr, uncompressedPtr + actualSize );\n\t\tinstance.exports.free( compressedPtr );\n\t\tinstance.exports.free( uncompressedPtr );\n\n\t\treturn dec;\n\n\t}\n\n}\n\n/**\n * BSD License\n *\n * For Zstandard software\n *\n * Copyright (c) 2016-present, Yann Collet, Facebook, Inc. All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *\n *  * Redistributions of source code must retain the above copyright notice, this\n *    list of conditions and the following disclaimer.\n *\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *    this list of conditions and the following disclaimer in the documentation\n *    and/or other materials provided with the distribution.\n *\n *  * Neither the name Facebook nor the names of its contributors may be used to\n *    endorse or promote products derived from this software without specific\n *    prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR\n * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n// wasm:begin\nconst wasm = '';\n// wasm:end\n","import { inflate } from 'pako';\nimport Lerc from 'lerc';\nimport { ZSTDDecoder } from 'zstddec';\nimport BaseDecoder from './basedecoder.js';\nimport { LercParameters, LercAddCompression } from '../globals.js';\n\nexport const zstd = new ZSTDDecoder();\n\nexport default class LercDecoder extends BaseDecoder {\n  constructor(fileDirectory) {\n    super();\n\n    this.planarConfiguration = typeof fileDirectory.PlanarConfiguration !== 'undefined' ? fileDirectory.PlanarConfiguration : 1;\n    this.samplesPerPixel = typeof fileDirectory.SamplesPerPixel !== 'undefined' ? fileDirectory.SamplesPerPixel : 1;\n\n    this.addCompression = fileDirectory.LercParameters[LercParameters.AddCompression];\n  }\n\n  decodeBlock(buffer) {\n    switch (this.addCompression) {\n      case LercAddCompression.None:\n        break;\n      case LercAddCompression.Deflate:\n        buffer = inflate(new Uint8Array(buffer)).buffer; // eslint-disable-line no-param-reassign, prefer-destructuring\n        break;\n      case LercAddCompression.Zstandard:\n        buffer = zstd.decode(new Uint8Array(buffer)).buffer; // eslint-disable-line no-param-reassign, prefer-destructuring\n        break;\n      default:\n        throw new Error(`Unsupported LERC additional compression method identifier: ${this.addCompression}`);\n    }\n\n    const lercResult = Lerc.decode(buffer, { returnPixelInterleavedDims: this.planarConfiguration === 1 });\n    const lercData = lercResult.pixels[0];\n    return lercData.buffer;\n  }\n}\n"],"names":["LercDecode","CntZImage","input","options","skipMask","encodedMaskData","parsedData","parse","inputOffset","noDataValue","defaultNoDataValue","uncompressedData","uncompressPixelValues","pixelType","Float32Array","returnMask","result","width","height","pixelData","resultPixels","minValue","maxValue","pixels","resultMask","maskData","returnEncodedMask","mask","bitset","returnFileInfo","fileInfo","formatFileInfo","computeUsedBitDepths","bitDepths","data","TypedArrayClass","maskBitset","storeDecodedMask","currentValue","blockIdx","numX","numBlocksX","numY","numBlocksY","blockWidth","Math","floor","blockHeight","scale","maxZError","Number","MAX_VALUE","Uint8Array","xx","yy","blockDataBuffer","y","thisBlockHeight","x","thisBlockWidth","blockData","blockPtr","constValue","maskByte","outPtr","outStride","block","blocks","encoding","rawData","unstuff","stuffedData","bitsPerPixel","numValidPixels","offset","fileIdentifierString","fileVersion","imageType","eofOffset","numBytes","numBlocks","i","float32","Object","keys","fp","fileIdView","String","fromCharCode","apply","trim","view","DataView","getInt32","getUint32","getFloat64","getFloat32","ceil","cnt","getInt16","ip","op","getUint8","val","length","actualNumBlocksX","actualNumBlocksY","Array","blockI","blockY","blockX","size","bytesLeft","byteLength","min","headerByte","offsetType","getInt8","numValidPixelsType","getUint16","arrayBuf","numPixels","ArrayBuffer","set","dataBytes","dataWords","Uint32Array","src","dest","o","n","buffer","bitMask","bitsLeft","nmax","numInvalidTailBytes","missingBits","Lerc2Decode","BitStuffer","lutArr","unshift","bitPos","Lerc2Helpers","HUFFMAN_LUT_BITS_MAX","computeChecksumFletcher32","sum1","sum2","len","words","tlen","readHeaderInfo","ptr","headerInfo","lastIndexOf","keyLength","checksum","numDims","numValidPixel","microBlockSize","blobSize","zMin","zMax","this","checkMinMaxRanges","OutPixelTypeArray","getDataTypeArray","rangeBytes","getDataTypeSize","minValues","readSubArray","maxValues","equal","readMask","mb","k","readDataOneSweep","useBSQForOutputDim","swapDimensionOrder","z","nStart","readHuffmanTree","BITS_MAX","i0","i1","decodeBits","j","codeTable","first","second","word","srcPtr","numBitsLUT","numBitsLUTQick","tree","TreeNode","undefined","max","entry","code","numEntries","jj","node","decodeLut","right","left","readHuffman","delta","valTmp","valTmpQuick","ii","huffmanInfo","prevVal","iDim","deltaEncode","encodeMode","resultPixelsAllDim","viewByteLength","bits67","doLut","numBits","numElements","store8","lutData","lutBytes","counter","lut","bitstuffer","readTiles","dataTypeSize","blockEncoding","isDiffEncoding","resultPixelsPrevDim","row","col","bytesleft","lastBlockHeight","lastBlockWidth","fileVersionCheckNum","uncompressed","getDataTypeUsed","getOnePixel","constantoffset","constant","getPixelType","constructConstantSurface","valMin","t","tp","Int8Array","Int16Array","Uint16Array","Int32Array","Float64Array","isValidPixelValue","isValid","s","dt","tc","temp","getUInt32","inputIsBIP","swap","decode","onesweep","diff","returnPixelInterleavedDims","bReadDataOneSweep","abs","flagHuffman","validPixelCount","dimCount","dimStats","getBandCount","count","isPlatformLittleEndian","a","b","Lerc","encodedData","lerc","majorVersion","substring","bandMask","iPlane","eof","bandMasks","decodedPixelBlock","statistics","uniqueBandMaskCount","push","init","instance","heap","IMPORT_OBJECT","env","emscripten_notify_memory_growth","index","exports","memory","wasm","zstd","fetch","then","response","arrayBuffer","WebAssembly","instantiate","_init","Buffer","from","array","uncompressedSize","arguments","Error","compressedSize","compressedPtr","malloc","ZSTD_findDecompressedSize","uncompressedPtr","actualSize","ZSTD_decompress","dec","slice","free","LercDecoder","BaseDecoder","constructor","fileDirectory","super","planarConfiguration","PlanarConfiguration","samplesPerPixel","SamplesPerPixel","addCompression","LercParameters","AddCompression","decodeBlock","LercAddCompression","None","Deflate","inflate","Zstandard","concat"],"sourceRoot":""}